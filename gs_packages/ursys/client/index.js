(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index-client.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/class-datamap.js":
/*!******************************!*\
  !*** ./src/class-datamap.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\n/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  A class for managing hash-mapped data and detecting differences\n  in a dataset.\n\n  (1) manages differences - an array of just keys of your object is\n      passed in, and DataMap returns what's the same or different.\n  (2) stores related data by key into a Map()\n  (3) utility methods for managing collections and their objects from\n      the LokiJS database\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n/// LIBRARIES /////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// CONSTANTS /////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// list of collection names stored in database\nconst DBKEYS = ['teachers', 'classrooms', 'groups', 'models', 'criteria', 'sentenceStarters', 'ratingsDefinitions', 'classroomResources', 'resources', 'pmcData', 'pmcData.entities', 'pmcData.comments', 'pmcData.markedread', 'pmcData.visuals']; /// list of valid database change commands\n\nconst DBCMDS = new Map([['add', 'NET:SRV_DBADD'], ['update', 'NET:SRV_DBUPDATE'], ['remove', 'NET:SRV_DBREMOVE']]); /// DECLARATIONS //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nconst DBG = false;\n/**\n *  An object containing the differences detected between an array NOW vs\n *  an array the LAST TIME\n *  @typedef {Object} ArrayChangeObject\n *  @property {Array} added -\n *  @property {Array} removed -\n *  @property {Array} updated -\n */\n/// CLASS /////////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nclass DataMap {\n  constructor() {\n    this.ids = []; // array of string ids\n\n    this.idsUpdated = [];\n    this.idsAdded = [];\n    this.idsRemoved = [];\n    this.map = new Map();\n    this.selection = new Set();\n  }\n  /** Given an array of elements, return the differences since the last\n   *  call. Useful for managing data protocols that send the entire list\n   *  of entities in an array.\n   *  @param {Array<string>} arr - array of elements. The elements should be usable\n   *  as keys in a Map.\n   *  @returns {ArrayChangeObject} - { added, updated, removed }\n   */\n\n\n  GetChanges(arr) {\n    const results = DataMap.f_deltaFilterIDArray(arr, this.map); // fix bug\n\n    const {\n      added,\n      removed,\n      updated\n    } = results; // save results\n\n    this.idsAdded = added;\n    this.idsRemoved = removed;\n    this.idsUpdated = updated; // return results\n\n    return {\n      added,\n      removed,\n      updated\n    };\n  }\n  /**\n   *  @param {*} id - array value to compare\n   *  @returns {boolean} - true if id exists in the map\n   */\n\n\n  Has(id) {\n    return this.map.has(id);\n  }\n  /** Retrieve\n   *  @param {string} id - key\n   *  @returns {string} - the object associated with the key\n   */\n\n\n  Get(id) {\n    return this.map.get(id);\n  }\n  /**\n   *  @param {string} id - key\n   *  @param {string} element - element\n   */\n\n\n  Set(id, element) {\n    this.map.set(id, element);\n  }\n\n} /// STATIC METHODS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nDataMap.DBKEYS = DBKEYS;\nDataMap.DBCMDS = DBCMDS; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** returns an array of valid TOP LEVEL collections\n */\n\nDataMap.Collections = () => {\n  return DBKEYS.filter(el => !el.includes('.'));\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** validate that keyName is a valid DBKEY\n *  @param {string} keyName - extract from the DBSYNC data props\n */\n\n\nDataMap.IsValidKey = keyName => {\n  return DBKEYS.includes(keyName);\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** validate command is valid\n *  @param {string} command - extract from the DBSYNC data.cmd prop\n */\n\n\nDataMap.ValidateCommand = command => DBCMDS.has(command); /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** lookup server message\n *  @param {string} command - a valid key\n */\n\n\nDataMap.GetCommandMessage = command => DBCMDS.get(command); /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Used by server to parse DBQuery data object for modify, add, or update ops.\n *  For parsing the response, see ExtractSyncData\n *  There are two input data formats:\n *  key    { 'pmcData': value }\n *         .. where val is an object with an id\n *  subkey { 'pmcData.entities': { id, entities: value }\n *         .. where id is a modelId and val is a single entity obj\n *  @param {Object} data - object with properties matching DBKEY contain array of values\n *  @returns {Array} - an array of { colkey, subkey, value } for each matching DBKEY\n */\n\n\nDataMap.ExtractQueryData = data => {\n  let queries = []; // the colkey might be a compound key (e.g. pmcData.entities)\n\n  Object.keys(data).forEach(foundKey => {\n    // only return keys that match a collection name\n    if (!DataMap.IsValidKey(foundKey)) return; // process valid key\n\n    let value = data[foundKey]; // should be an object always\n\n    if (Array.isArray(value)) {\n      console.warn(`key: ${foundKey} is an array; did you mean to use ExtractSyncData() instead?`);\n      return;\n    }\n\n    if (typeof value !== 'object') {\n      console.warn(`key: ${foundKey} value is not an object`);\n      return;\n    } // prepare for write\n\n\n    const [colkey, subkey] = foundKey.split('.');\n    const entry = {\n      colkey,\n      subkey,\n      value\n    };\n    queries.push(entry);\n  });\n  return queries;\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Return an array of keys and update objects. Used to parse the update or\n *  response from a DBQuery. Input formats are:\n *  .. key            { 'pmcData': [ {...} ] }\n *  .. key w/subkey   { 'pmcData.entities': [ {...} ] }\n *  Return values are:\n * .. colkey : string (e.g. 'pmcData' )\n * .. subkey : string (e.g. 'entities' )\n * .. value  : object (e.g. { id:2, type:'prop', name:'Fish' } )\n */\n\n\nDataMap.ExtractSyncData = data => {\n  const syncitems = [];\n  Object.keys(data).forEach(foundKey => {\n    // only return keys that match a collection name\n    if (!DataMap.IsValidKey(foundKey)) return; // process valid key\n\n    let values = data[foundKey]; // should be an object always\n\n    const [colkey, subkey] = foundKey.split('.');\n    values.forEach(value => {\n      const entry = {\n        colkey,\n        subkey,\n        value\n      };\n      syncitems.push(entry);\n    });\n  });\n  return syncitems;\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** validate that data has valid keys DB keys. Returns number of found keys\n *  that conform to type\n *  key    { 'pmcData': value }\n *         .. where val is an object with an id\n *  subkey { 'pmcData.entities': { id, entities: value }\n *         .. where id is a modelId and val is a single entity obj\n * @param {string} cobj - collection object with collection keys\n */\n\n\nDataMap.ValidateCollections = cobj => {\n  const {\n    cmd\n  } = cobj;\n  let count = 0;\n  Object.keys(cobj).forEach(colkey => {\n    // only return colkey that match a collection name\n    if (!DataMap.IsValidKey(colkey)) return; // extract the collection\n\n    const value = cobj[colkey]; // if we got this far, then the colkey contained a non-array\n\n    let ok = true;\n\n    switch (cmd) {\n      case 'add':\n        // eslint-disable-next-line no-bitwise\n        ok &= f_validateAdd(value, colkey);\n        break;\n\n      case 'update':\n        // eslint-disable-next-line no-bitwise\n        ok &= f_validateUpdate(value, colkey);\n        break;\n\n      case 'remove':\n        // eslint-disable-next-line no-bitwise\n        ok &= f_validateRemove(value, colkey);\n        break;\n\n      default:\n        console.log(cmd);\n        throw Error(`${colkey} unknown command ${cmd}`);\n    } // switch\n\n\n    if (!ok) throw Error(`${colkey}.${cmd} single value mystery error`); // sucessful processing\n\n    count++;\n  }); // foreach colkey...loop to next one\n  // finished processing everything, return the count of processed collection\n  // if we dont' get this far, an error had been thrown\n\n  return count;\n};\n\nfunction f_validateAdd(value, key) {\n  if (!key) throw Error('arg2 key required');\n  const [colkey, subkey] = key.split('.');\n  const vtype = typeof value;\n  if (vtype !== 'object') throw Error(`${key}.add: requires OBJECTS with no id`);\n\n  if (subkey) {\n    if (!value.id) throw Error(`${key}.add requires a top-level id to select subkey field`);\n    if (value[subkey].id) throw Error(`${key}.add: ${subkey} value can not have an id`);\n  } else {\n    // eslint-disable-next-line no-lonely-if\n    if (value.id) throw Error(`${key}.add: ${colkey} value can not have an id`);\n  }\n\n  return true;\n}\n\nfunction f_validateUpdate(value, key) {\n  if (!key) throw Error('arg2 key required');\n  const [colkey, subkey] = key.split('.');\n  const vtype = typeof value;\n  if (vtype !== 'object') throw Error(`${key}.update: requires OBJECTS with an id, not ${vtype}`);\n  if (!DataMap.IsValidId(value.id)) throw Error(`${colkey}.update has invalid id ${value.id}`);\n\n  if (subkey) {\n    if (typeof value[subkey] !== 'object') throw Error(`${key}.update expected sub object`);\n    const subid = value[subkey].id;\n    if (!DataMap.IsValidId(subid)) throw Error(`${key}.update invalid id ${subid} typeof ${typeof subid}`);\n  }\n\n  return true;\n}\n\nfunction f_validateRemove(value, key) {\n  if (!key) throw Error('arg2 key required');\n  const [colkey, subkey] = key.split('.');\n  const vtype = typeof value;\n  if (vtype !== 'object') throw Error(`${key}.remove expected object value`);\n  if (!DataMap.IsValidId(value.id)) throw Error(`${key}.remove has invalid id ${value.id}`);\n\n  if (subkey) {\n    if (typeof value[subkey] !== 'object') throw Error(`${key}.remove expects sub object with id`);\n    if (!DataMap.IsValidId(value[subkey].id)) throw Error(`${key}.remove subobject must have valid id`);\n  }\n\n  return true;\n} // called by DataMap.GetChange() instance method\n// modifies elementMap\n// returns added, removed, updated arrays id list\n\n\nfunction f_deltaFilterIDArray(arr, elementMap = new Map()) {\n  // find what matches and what is new\n  const added = [];\n  const updated = [];\n  const removed = [];\n  arr.forEach(id => {\n    if (elementMap.has(id)) updated.push();else added.push(id);\n  });\n  elementMap.forEach((val, id) => {\n    if (!updated.includes(id)) removed.push(id);\n  }); // return results\n\n  return {\n    added,\n    removed,\n    updated\n  };\n} /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Given an input, insure that it is an int >=0\n */\n\n\nDataMap.IsValidId = id => {\n  let test = Number.parseInt(id, 10) === id;\n  return test && id >= 0;\n};\n/** given an array of idsObjs, report that all that it is an int >=0\n */\n\n\nDataMap.HasValidIdObjs = ids => {\n  if (!Array.isArray(ids)) throw Error('arg1 must be array of objects');\n  return ids.every(idObj => DataMap.IsValidId(idObj.id));\n};\n/** given an array of ids, report if all vonfirm\n */\n\n\nDataMap.IsValidIdsArray = ids => {\n  if (!Array.isArray(ids)) throw Error('arg1 must be array of ints');\n  return ids.every(id => DataMap.IsValidId(id));\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Given an original object, modify a key inside it with the supplied data\n *  It's assumed the the propname is for an array of objs w/ id { id, ... }\n * @param {object} obj - object with property list to search/modify\n * @param {string} propname - name of property to extract list from obj\n * @param {object} updObj - new data to replace existing object by id match\n */\n\n\nDataMap.MutateObjectProp = (obj, propname, updObj) => {\n  if (typeof obj !== 'object') throw Error('arg1 must be object');\n  if (typeof propname !== 'string') throw Error('arg2 must be string');\n  if (typeof updObj !== 'object') throw Error('arg3 must be object');\n  if (!DataMap.IsValidId(updObj.id)) throw Error('arg3 must be object with id');\n  const id = updObj.id;\n  const list = obj[propname];\n  const found = list.find(el => el.id === id); //\n\n  if (!found) return undefined; //\n  // if we got this far, mutate\n\n  const sBefore = JSON.stringify(obj);\n  const sIdObj = JSON.stringify(updObj);\n  Object.assign(found, updObj);\n  const sAfter = JSON.stringify(obj); // return a copy without loki metadata for return\n\n  const retobj = { ...found\n  };\n  retobj.$loki = undefined;\n  retobj.meta = undefined;\n  if (DBG) console.log(`UpdateObjectProp:\\n.. old:${sBefore}\\n.. new:${sAfter}`);\n  return retobj;\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Overwrite the original object with changes in second object\n */\n\n\nDataMap.MutateObject = (obj, idObj) => {\n  if (typeof obj !== 'object') throw Error('arg1 must be object');\n  if (typeof idObj !== 'object') throw Error('arg2 must be object');\n  if (!DataMap.IsValidId(idObj.id)) throw Error('arg2 must be object with id');\n  Object.assign(obj, idObj); // return a copy without loki metadata for return\n\n  const retobj = { ...obj\n  };\n  retobj.$loki = undefined;\n  retobj.meta = undefined;\n  return retobj;\n}; /// INITIALIZATION ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nmodule.exports = DataMap;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/class-datamap.js\n");

/***/ }),

/***/ "./src/class-messager.js":
/*!*******************************!*\
  !*** ./src/class-messager.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable @typescript-eslint/no-use-before-define */\n\n/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n    Messager - Handle a collection of named events and their handlers.\n    https://en.wikipedia.org/wiki/Event-driven_architecture#JavaScript\n\n    This is a low-level class used by other URSYS modules both by client\n    browsers and nodejs.\n\n    NOTE: CallerReturnFunctions receive data object AND control object.\n    The control object has the \"return\" function that closes a transaction;\n    this is useful for async operations without Promises.\n\n    NOTE: When providing a handlerFunc, users should be aware of binding\n    context using Function.prototype.bind() or by using arrow functions\n\\\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/\n// NOTE: This module uses the COMMONJS module format for compatibility\n// between node and browser-side Javascript.\nconst NetPacket = __webpack_require__(/*! ./class-netpacket */ \"./src/class-netpacket.js\"); /// MODULE VARS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nlet MSGR_IDCOUNT = 0;\nlet DBG = true; /// URSYS MESSAGER CLASS //////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/**\n * Implement network-aware message passing scheme based on message strings passing\n * single data objects. Message table stores multiple message handlers as a set\n * to avoid multiple registered handlers\n */\n\nclass Messager {\n  constructor() {\n    this.handlerMap = new Map(); // message map storing sets of functions\n\n    this.messager_id = ++MSGR_IDCOUNT;\n  } /// FIRE ONCE EVENTS //////////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /**\n   * Register a message string to a handler function that will receive a mutable\n   * data object that is returned at the end of the handler function\n   * @example Subscribe('MY_MESSAGE',(data)=>{ return data; });\n   * @param {string} mesgName message to register a handler for\n   * @param {function} handlerFunc function receiving 'data' object\n   * @param {Object} [options] options\n   * @param {string} [options.handlerUID] URSYS_ID identifies group, attaches handler\n   * @param {string} [options.info] description of message handler\n   * @param {Object} [options.syntax] dictionary of data object properties accepted\n   */\n\n\n  Subscribe(mesgName, handlerFunc, options = {}) {\n    let {\n      handlerUID\n    } = options;\n    let {\n      syntax\n    } = options;\n    let {\n      fromNet\n    } = options;\n\n    if (typeof handlerFunc !== 'function') {\n      throw Error('arg2 must be a function');\n    }\n\n    if (typeof handlerUID === 'string') {\n      // bind the URChan uid to the handlerFunc function for convenient access\n      // by the message dispatcher\n      handlerFunc.ulink_id = handlerUID;\n    }\n\n    if (typeof fromNet === 'boolean') {\n      // true if this subscriber wants to receive network messages\n      handlerFunc.fromNet = fromNet;\n    }\n\n    let handlers = this.handlerMap.get(mesgName);\n\n    if (!handlers) {\n      handlers = new Set();\n      this.handlerMap.set(mesgName, handlers);\n    } // syntax annotation\n\n\n    if (syntax) handlerFunc.umesg = {\n      syntax\n    }; // saved function to handler\n\n    handlers.add(handlerFunc);\n    return this;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /**\n   * Unsubscribe a handler function from a registered message. The handler\n   * function object must be the same one used to register it.\n   * @param {string} mesgName message to unregister a handler for\n   * @param {function} handlerFunc function originally registered\n   */\n\n\n  Unsubscribe(mesgName, handlerFunc) {\n    if (!arguments.length) {\n      this.handlerMap.clear();\n    } else if (arguments.length === 1) {\n      this.handlerMap.delete(mesgName);\n    } else {\n      const handlers = this.handlerMap.get(mesgName);\n\n      if (handlers) {\n        handlers.delete(handlerFunc);\n      }\n    }\n\n    return this;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /**\n   * Publish a message with data payload\n   * @param {string} mesgName message to send data to\n   * @param {Object} inData parameters for the message handler\n   * @param {Object} [options] options\n   * @param {string} [options.srcUID] URSYS_ID group that is sending the\n   * message. If this is set, then the sending URSYS_ID can receive its own\n   * message request.\n   * @param {string} [options.type] type of message (mcall)\n   * @param {boolean} [options.toLocal=true] send to local message handlers\n   * @param {boolean} [options.toNet=false] send to network message handlers\n   */\n\n\n  Publish(mesgName, inData, options = {}) {\n    let {\n      srcUID,\n      type\n    } = options;\n    let {\n      toLocal = true,\n      toNet = false\n    } = options;\n    const handlers = this.handlerMap.get(mesgName); /// toLocal\n\n    if (handlers && toLocal) handlers.forEach(handlerFunc => {\n      // handlerFunc signature: (data,dataReturn) => {}\n      // handlerFunc has ulink_id property to note originating URCHAN object\n      // skip \"same origin\" calls\n      if (srcUID && handlerFunc.ulink_id === srcUID) {\n        console.warn(`MessagerSend: [${mesgName}] skip call since origin = destination; use Signal() if intended`);\n        return;\n      } // trigger the local handler (no return expected)\n\n\n      handlerFunc(inData, {}); // second param is for control message expansion\n    }); // end handlers.forEach\n    /// toNetwork\n\n    if (toNet) {\n      let pkt = new NetPacket(mesgName, inData, type);\n      pkt.SocketSend();\n    } // end toNetwork\n\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /**\n   * Publish message to everyone, local and network, and also mirrors back to self.\n   * This is a wrapper for Publish() that ensures that srcUID is overridden.\n   * @param {string} mesgName message to send data to\n   * @param {Object} inData parameters for the message handler\n   * @param {Object} [options] see Publish() for option details\n   */\n\n\n  Signal(mesgName, data, options = {}) {\n    if (options.srcUID) {\n      console.warn(`overriding srcUID ${options.srcUID} with NULL because Signal() doesn't use it`);\n      options.srcUID = null;\n    }\n\n    this.Publish(mesgName, data, options);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /**\n   * Issue a message transaction. Returns an array of promises. Works across\n   * the network.\n   * @param {string} mesgName message to send data to\n   * @param {Object} inData parameters for the message handler\n   * @param {Object} [options] see Publish() for option details\n   * @returns {Array} an array of Promises\n   */\n\n\n  async CallAsync(mesgName, inData, options = {}) {\n    let {\n      srcUID,\n      type\n    } = options;\n    let {\n      toLocal = true,\n      toNet = true\n    } = options;\n    let {\n      fromNet = false\n    } = options;\n    const channel = NetPacket.ExtractChannel(mesgName);\n    const handlers = this.handlerMap.get(mesgName);\n    let promises = []; /// handle a call from the network\n\n    if (toLocal) {\n      if (!channel.LOCAL && !fromNet) throw Error(`'${mesgName}' for local calls remove channel prefix`);\n\n      if (handlers) {\n        handlers.forEach(handlerFunc => {\n          /*/\n          handlerFunc signature: (data,dataReturn) => {}\n          handlerFunc has ulink_id property to note originating URCHAN object\n          handlerFunc has fromNet property if it expects to receive network sourced calls\n          /*/\n          // skip calls that don't have their fromNet stat set if it's a net call\n          if (fromNet && !handlerFunc.fromNet) {\n            if (DBG) console.warn(`MessagerCall: [${mesgName}] skip netcall for handler uninterested in net`);\n            return;\n          } // skip \"same origin\" calls\n\n\n          if (srcUID && handlerFunc.ulink_id === srcUID) {\n            if (DBG) console.warn(`MessagerCall: [${mesgName}] skip call since origin = destination; use Signal() if intended`);\n            return;\n          } // Create a promise. if handlerFunc returns a promise, it follows\n\n\n          let p = f_MakeResolverFunction(handlerFunc, inData);\n          promises.push(p);\n        }); // end foreach\n      } else {\n        // no handlers\n        promises.push(Promise.resolve({\n          error: 'local message handler not found'\n        }));\n      }\n    } // to local\n    // end if handlers\n    /// resolver function\n    /// remember MESSAGER class is used for more than just Network Calls\n    /// the state manager also uses it, so the resolved value may be of any type\n\n\n    function f_MakeResolverFunction(handlerFunc) {\n      return new Promise(resolve => {\n        let retval = handlerFunc(inData, {\n          /*control functions go here*/\n        });\n        resolve(retval);\n      });\n    } /// toNetwork\n\n\n    if (toNet) {\n      if (!channel.NET) throw Error('net calls must use NET: message prefix');\n      type = type || 'mcall';\n      let pkt = new NetPacket(mesgName, inData, type);\n      let p = pkt.PromiseTransaction();\n      promises.push(p);\n    } // end toNetwork\n    /// do the work\n\n\n    let resArray = await Promise.all(promises);\n    let resObj = Object.assign({}, ...resArray);\n    return resObj;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /**\n   * Get list of messages that are handled by this Messager instance.\n   * @returns {Array<string>} message name strings\n   */\n\n\n  MessageNames() {\n    let handlers = [];\n    this.handlerMap.forEach((set, key) => {\n      handlers.push(key);\n      if (DBG) console.log(`handler: ${key}`);\n    });\n    return handlers;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /**\n   * Get list of messages that are published to the network\n   * @returns {Array<string>} message name strings\n   */\n\n\n  NetMessageNames() {\n    let handlers = [];\n    this.handlerMap.forEach((set, key) => {\n      let addMessage = false; // eslint-disable-next-line no-return-assign, no-bitwise\n\n      set.forEach(func => addMessage |= func.fromNet === true);\n      if (addMessage) handlers.push(key);\n    });\n    return handlers;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /**\n   * Check to see if a message is handled by this Messager instance\n   * @param {string=''} msg message name to check\n   * @returns {boolean} true if message name is handled\n   */\n\n\n  HasMessageName(msg = '') {\n    return this.handlerMap.has(msg);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /**\n   * Ensure that the passed message names really exist in this Messager\n   * instance\n   * @param {Array<string>} msgs\n   */\n\n\n  ValidateMessageNames(msgs = []) {\n    const valid = [];\n    msgs.forEach(name => {\n      if (this.HasMessageName(name)) valid.push(name);else throw new Error(`ValidateMessageNames() found invalid message '${name}'`);\n    });\n    return valid;\n  }\n\n} // class Messager\n/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nmodule.exports = Messager;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/class-messager.js\n");

/***/ }),

/***/ "./src/class-netpacket.js":
/*!********************************!*\
  !*** ./src/class-netpacket.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable @typescript-eslint/no-use-before-define */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable lines-between-class-members */\n\n/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  NetPacket objects are sent between the browser and server as part of the\n  URSYS messaging system. NetMessages do not need addresses.\n\n  This NetPacket declaration is SHARED in both node and browser javascript\n  codebases.\n\n  FEATURES\n\n  * handles asynchronous transactions\n  * works in both node and browser contexts\n  * has an \"offline mode\" to suppress network messages without erroring\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/\n/// DEPENDENCIES //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst PROMPTS = __webpack_require__(/*! ./util/prompts */ \"./src/util/prompts.js\"); /// DEBUG MESSAGES ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nconst DBG = {\n  send: false,\n  transact: false,\n  setup: false\n};\nconst PR = PROMPTS.makeStyleFormatter('PKT');\nconst ERR = ':ERR:';\nconst PERR = ERR + PR;\nconst ERR_NOT_NETMESG = `${PERR}obj does not seem to be a NetPacket`;\nconst ERR_BAD_PROP = `${PERR}property argument must be a string`;\nconst ERR_ERR_BAD_CSTR = `${PERR}constructor args are string, object`;\nconst ERR_BAD_SOCKET = `${PERR}sender object must implement send()`;\nconst ERR_DUPE_TRANS = `${PERR}this packet transaction is already registered!`;\nconst ERR_NO_GLOB_UADDR = `${PERR}packet sending attempted before UADDR is set!`;\nconst ERR_UNKNOWN_TYPE = `${PERR}packet type is unknown:`;\nconst ERR_NOT_PACKET = `${PERR}passed object is not a NetPacket`;\nconst ERR_UNKNOWN_RMODE = `${PERR}packet routine mode is unknown:`; /// CONSTANTS /////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nconst M_INIT = 'init';\nconst M_ONLINE = 'online';\nconst M_STANDALONE = 'offline';\nconst M_CLOSED = 'closed';\nconst M_ERROR = 'error';\nconst VALID_CHANNELS = ['LOCAL', 'NET', 'STATE']; // * is all channels in list\n/// DECLARATIONS //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nlet m_id_counter = 0;\nlet m_id_prefix = 'PKT';\nlet m_transactions = {};\nlet m_netsocket = null;\nlet m_group_id = null;\nlet m_mode = M_INIT; /// ENUMS /////////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nconst PACKET_TYPES = ['msend', // a 'send' message returns no data\n'msig', // a 'signal' message is a send that calls all handlers everywhere\n'mcall', // a 'call' message returns data\n'state' // (unimplemented) a 'state' message is used by a state manager\n];\nconst TRANSACTION_MODE = ['req', // packet in initial 'request' mode\n'res' // packet in returned 'response' mode\n]; /// URSYS NETMESSAGE CLASS ////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Class NetPacket\n * Container for messages that can be sent across the network to the URSYS\n * server.\n * @typedef {Object} NetPacket\n * @property {string} msg - message\n * @property {Object} data - message data\n * @property {string} id - internal id\n * @property {string} type - packet operation type (1way,2way,sync)\n * @property {string} rmode - transaction direction\n * @property {string} memo - human-readable debug note space\n * @property {string} seqnum - sequence number for transaction\n * @property {Array} seqlog - array of seqnums, starting with originating address\n * @property {string} s_uid - originating browser internal endpoint\n * @property {string} s_uaddr - originating browser address\n * @property {string} s_group - group session key\n */\n\nclass NetPacket {\n  /** constructor\n   * @param {string|object} msg message name, or an existing plain object to coerce into a NetPacket\n   * @param {Object} data data packet to send\n   * @param {string} type the message (defined in PACKET_TYPES)\n   */\n  constructor(msg, data, type) {\n    // OPTION 1\n    // create NetPacket from (generic object)\n    if (typeof msg === 'object' && data === undefined) {\n      // make sure it has a msg and data obj\n      if (typeof msg.msg !== 'string' || typeof msg.data !== 'object') {\n        throw Error(ERR_NOT_NETMESG);\n      } // merge properties into this new class instance and return it\n\n\n      Object.assign(this, msg);\n      this.seqlog = this.seqlog.slice(); // copy array\n\n      m_SeqIncrement(this);\n      return this;\n    } // OPTION 2\n    // create NetPacket from JSON-encoded string\n\n\n    if (typeof msg === 'string' && data === undefined) {\n      let obj = JSON.parse(msg);\n      Object.assign(this, obj);\n      m_SeqIncrement(this);\n      return this;\n    } // OPTION 3\n    // create new NetPacket from scratch (mesg,data)\n    // unique id for every NetPacket\n\n\n    if (typeof type === 'string') m_CheckType(type);\n\n    if (typeof msg !== 'string' || typeof data !== 'object') {\n      throw Error(ERR_ERR_BAD_CSTR);\n    } // allow calls with null data by setting to empty object\n\n\n    this.data = data || {};\n    this.msg = msg; // id and debugging memo support\n\n    this.id = this.MakeNewID();\n    this.rmode = TRANSACTION_MODE[0]; // is default 'request' (trans request)\n\n    this.type = type || PACKET_TYPES[0]; // is default 'msend' (no return)\n\n    this.memo = ''; // transaction support\n\n    this.seqnum = 0; // positive when part of transaction\n\n    this.seqlog = []; // transaction log\n    // addressing support\n\n    this.s_uaddr = NetPacket.SocketUADDR() || null; // first originating uaddr set by SocketSend()\n\n    this.s_group = null; // session groupid is set by external module once validated\n\n    this.s_uid = null; // first originating URCHAN srcUID\n    // filtering support\n  } // constructor\n  /// ACCESSSOR METHODS ///////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.Type() returns the TRANSACTION_TYPE of this packet\n   */\n\n\n  Type() {\n    return this.type;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.Type() returns true if type matches\n   * @param {string} type the type to compare with the packet's type\n   * @returns {boolean}\n   */\n\n\n  IsType(type) {\n    return this.type === type;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.SetType() sets the type of the packet. Must be a known type\n   * in PACKET_TYPES\n   */\n\n\n  SetType(type) {\n    this.type = m_CheckType(type);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** returns the message string of form CHANNEL:MESSAGE, where CHANNEL:\n   * is optional\n   */\n\n\n  Message() {\n    return this.msg;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** returns MESSAGE without the CHANNEL: prefix. The channel (e.g.\n   * NET, LOCAL, STATE) is also set true\n   */\n\n\n  DecodedMessage() {\n    return NetPacket.ExtractChannel(this.msg);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.Is() returns truthy value (this.data) if the passed msgstr\n   *  matches the message associated with this NetPacket\n   */\n\n\n  Is(msgstr) {\n    return msgstr === this.msg ? this.data : undefined;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.IsServerMessage() is a convenience function return true if\n   * server message */\n\n\n  IsServerMessage() {\n    return this.msg.startsWith('NET:SRV_');\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.SetMessage() sets the message field\n   */\n\n\n  SetMessage(msgstr) {\n    this.msg = msgstr;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.Data() returns the entire data payload or the property within\n   * the data payload (can return undefined if property doesn't exist)\n   */\n\n\n  Data(prop) {\n    if (!prop) return this.data;\n    if (typeof prop === 'string') return this.data[prop];\n    throw Error(ERR_BAD_PROP);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /**\n   * Convenience method to set data object entirely\n   */\n\n\n  SetData(propOrVal, val) {\n    if (typeof propOrVal === 'object') {\n      this.data = propOrVal;\n      return;\n    }\n\n    if (typeof propOrVal === 'string') {\n      this.data[propOrVal] = val;\n      return;\n    }\n\n    throw Error(ERR_BAD_PROP);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.Memo() returns the 'memo' field of the packet */\n\n\n  Memo() {\n    return this.memo;\n  }\n\n  SetMemo(memo) {\n    this.memo = memo;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.JSON() returns a stringified JSON version of the packet. */\n\n\n  JSON() {\n    return JSON.stringify(this);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.SourceGroupId() return the session group id associated with\n   * this packet.\n   */\n\n\n  SourceGroupID() {\n    return this.s_group;\n  } /// TRANSACTION SUPPORT /////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.SeqNum() returns a non-positive integer that is the number of\n   * times this packet was reused during a transaction (e.g. 'mcall' types).\n   */\n\n\n  SeqNum() {\n    return this.seqnum;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.SourceAddress() returns the originating browser of the packet,\n   * which is the socketname maintained by the URSYS server. It is valid only\n   * after the URSYS server has received it, so it is invalid when a NetPacket\n   * packet is first created.\n   */\n\n\n  SourceAddress() {\n    /*/ NOTE\n         s_uaddr is the most recent sending browser.\n         If a NetPacket packet is reused in a transaction (e.g. a call that returns\n        data) then the originating browser is the first element in the transaction\n        log .seqlog\n    /*/\n    // is this packet originating from server to a remote?\n    if (this.s_uaddr === NetPacket.DefaultServerUADDR() && !this.msg.startsWith('NET:SVR_')) {\n      return this.s_uaddr;\n    } // this is a regular message forward to remote handlers\n\n\n    return this.IsTransaction() ? this.seqlog[0] : this.s_uaddr;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** Return true if this pkt is from the server targeting remote handlers\n   */\n\n\n  IsServerOrigin() {\n    return this.SourceAddress() === NetPacket.DefaultServerUADDR();\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.CopySourceAddress() copies the source address of sets the\n   * current address to the originating URSYS browser address. Used by server\n   * forwarding and returning packets between remotes.\n   * @param {NetPacket} pkt - the packet to copy source from\n   */\n\n\n  CopySourceAddress(pkt) {\n    if (pkt.constructor.name !== 'NetPacket') throw Error(ERR_NOT_PACKET);\n    this.s_uaddr = pkt.SourceAddress();\n  } /// - - - - - - - - server- - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.Info() returns debug information about the packet\n   * @param {string} key - type of debug info (always 'src' currently)\n   * @returns {string} source browser + group (if set)\n   */\n\n\n  Info(key) {\n    switch (key) {\n      case 'src':\n      /* falls-through */\n\n      default:\n        return this.SourceGroupID() ? `${this.SourceAddress()} [${this.SourceGroupID()}]` : `${this.SourceAddress()}`;\n    }\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.MakeNewID() is a utility method that generates a unique id for\n   * each NetPacket packet. When combined with s_uaddr and s_srcuid, this gives\n   * a packet a unique ID across the entire URSYS network.\n   * @returns {string} unique id\n   */\n\n\n  MakeNewID() {\n    let idStr = (++m_id_counter).toString();\n    this.id = m_id_prefix + idStr.padStart(5, '0');\n    return this.id;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.SocketSend() is a convenience method to let packets 'send\n   * themselves' to the network via the URSYS server.\n   * @param {Object=m_socket} socket - web socket object. m_socket\n   * is defined only on browsers; see NetPacket.GlobalSetup()\n   */\n\n\n  SocketSend(socket = m_netsocket) {\n    if (m_mode === M_ONLINE || m_mode === M_INIT) {\n      this.s_group = NetPacket.GlobalGroupID();\n      let dst = socket.UADDR || 'unregistered socket';\n      if (!socket) throw Error('SocketSend(sock) requires a valid socket');\n\n      if (DBG.send) {\n        let status = `sending '${this.Message()}' to ${dst}`;\n        console.log(PR, status);\n      } // for server-side ws library, send supports a function callback\n      // for WebSocket, this is ignored\n\n\n      socket.send(this.JSON(), err => {\n        if (err) console.error(`\\nsocket ${socket.UADDR} reports error ${err}\\n`);\n      });\n    } else if (m_mode !== M_STANDALONE) {\n      console.log(PR, \"SocketSend: Can't send because NetPacket mode is\", m_mode);\n    } else {\n      console.warn(PR, 'STANDALONE MODE: SocketSend() suppressed!');\n    } // FYI: global m_netsocket is not defined on server, since packets arrive on multiple sockets\n\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.PromiseTransaction() maps a packet to a return handler using a\n   * unique key. This key allows an incoming packet to be mapped back to the\n   * caller even if it is technically a different object received over the\n   * network.\n   * @param {Object=m_socket} socket - web socket object. m_socket is defined\n   * only on browsers; see NetPacket.GlobalSetup()\n   */\n\n\n  PromiseTransaction(socket = m_netsocket) {\n    if (m_mode === M_STANDALONE) {\n      console.warn(PR, 'STANDALONE MODE: PromiseTransaction() suppressed!');\n      return Promise.resolve();\n    } // global m_netsocket is not defined on server, since packets arrive on multiple sockets\n\n\n    if (!socket) throw Error('PromiseTransaction(sock) requires a valid socket'); // save our current UADDR\n\n    this.seqlog.push(NetPacket.UADDR);\n    let dbg = DBG.transact && !this.IsServerMessage();\n    let p = new Promise((resolve, reject) => {\n      let hash = m_GetHashKey(this);\n\n      if (m_transactions[hash]) {\n        reject(Error(`${ERR_DUPE_TRANS}:${hash}`));\n      } else {\n        // save the resolve function in transactions table;\n        // promise will resolve on remote invocation with data\n        m_transactions[hash] = data => {\n          if (dbg) {\n            console.log(PR, 'resolving promise with', JSON.stringify(data));\n          }\n\n          resolve(data);\n        };\n\n        this.SocketSend(socket);\n      }\n    });\n    return p;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.RoutingMode() returns the direction of the packet to a\n   * destination handler (req) or back to the origin (res).  */\n\n\n  RoutingMode() {\n    return this.rmode;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.IsRequest() returns true if this packet is one being sent\n   * to a remote handler\n   */\n\n\n  IsRequest() {\n    return this.rmode === 'req';\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.IsResponse() returns true if this is a packet\n   * being returned from a remote handler\n   * @returns {boolean} true if this is a transaction response\n   */\n\n\n  IsResponse() {\n    return this.rmode === 'res'; // more bulletproof check, but unnecessary\n    // return this.rmove ==='res' && this.SourceAddress() === NetPacket.UADDR;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.IsTransaction() tests whether the packet is a response to a\n   * call that was sent out previously.\n   */\n\n\n  IsTransaction() {\n    return this.rmode !== 'req' && this.seqnum > 0 && this.seqlog[0] === NetPacket.UADDR;\n  } ///\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.ReturnTransaction() is used to send a packet back to its\n   * origin. It saves the current browser address (stored in NetPacket.UADDR),\n   * sets the direction of the packet, and puts it on the socket.\n   * @param {Object=m_socket} socket - web socket object. m_socket is defined\n   * only on browsers; see NetPacket.GlobalSetup()\n   */\n\n\n  ReturnTransaction(socket = m_netsocket) {\n    // global m_netsocket is not defined on server, since packets arrive on multiple sockets\n    if (!socket) throw Error('ReturnTransaction(sock) requires a valid socket'); // note: seqnum is already incremented by the constructor if this was\n    // a received packet\n    // add this to the sequence log\n\n    this.seqlog.push(NetPacket.UADDR);\n    this.rmode = m_CheckRMode('res');\n    this.SocketSend(socket);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** NetPacket.CompleteTransaction() is called when a packet is received back\n   * from the remote handler. At this point, the original caller needs to be\n   * informed via the saved function handler created in\n   * NetPacket.PromiseTransaction().\n   */\n\n\n  CompleteTransaction() {\n    let dbg = DBG.transact && !this.IsServerMessage();\n    let hash = m_GetHashKey(this);\n    let resolverFunc = m_transactions[hash];\n    if (dbg) console.log(PR, 'CompleteTransaction', hash);\n\n    if (typeof resolverFunc !== 'function') {\n      throw Error(`transaction [${hash}] resolverFunction is type ${typeof resolverFunc}`);\n    } else {\n      resolverFunc(this.data);\n      Reflect.deleteProperty(m_transactions[hash]);\n    }\n  }\n\n} // class NetPacket\n/// STATIC CLASS METHODS //////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** NetPacket.GlobalSetup() is a static method that initializes shared\n * parameters for use by all instances of the NetPacket class. It is used only\n * on browsers, which have a single socket connection.\n *\n * If no netsocket property is defined, then NetPacket instances will surpress\n * sending of network messages while allowing local messages to work normally.\n * See NetPacket.GlobalOfflineMode() for more information.\n * @function\n * @param {Object} [config] - configuration object\n * @param {Object} [config.netsocket] - valid websocket to URSYS server\n * @param {Object} [config.uaddr] - URSYS browser address\n */\n\n\nNetPacket.GlobalSetup = (config = {}) => {\n  let {\n    uaddr,\n    netsocket,\n    peers,\n    is_local\n  } = config;\n  if (uaddr) NetPacket.UADDR = uaddr;\n  if (peers) NetPacket.PEERS = peers;\n\n  if (netsocket) {\n    // NOTE: m_netsocket is set only on clients since on server, there are\n    // multiple sockets\n    if (typeof netsocket.send !== 'function') throw Error(ERR_BAD_SOCKET);\n    if (DBG.setup) console.log(PR, 'GlobalSetup: netsocket set, mode online');\n    m_netsocket = netsocket;\n    m_mode = M_ONLINE;\n  }\n\n  if (is_local) NetPacket.ULOCAL = is_local;\n};\n\nNetPacket.UADDR = 'UNASSIGNED';\nNetPacket.ULOCAL = false; // set if connection is a local connection\n\nNetPacket.PEERS = undefined; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** NetPacket.GlobalCleanup() is a static method called only by the client,\n * which drops the current socket and puts the app in 'closed' state. In\n * practice this call doesn't accomplish much, but is here for symmetry to\n * GlobalSetup().\n * @function\n */\n\nNetPacket.GlobalCleanup = () => {\n  if (m_netsocket) {\n    if (DBG.setup) console.log(PR, 'GlobalCleanup: deallocating netsocket, mode closed');\n    m_netsocket = null;\n    m_mode = M_CLOSED;\n    NetPacket.ULOCAL = false;\n  }\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Static method NetPacket.GlobalOfflineMode() explicitly sets the mode to STANDALONE, which\n * actively suppresses remote network communication without throwing errors.\n * It's used for static code snapshots of the webapp that don't need the\n * network.\n * @function\n */\n\n\nNetPacket.GlobalOfflineMode = () => {\n  m_mode = M_STANDALONE;\n\n  if (m_netsocket) {\n    console.log(...PR('STANDALONE MODE: NetPacket disabling network'));\n    m_netsocket = null;\n    let event = new CustomEvent('URSYSDisconnect', {});\n    console.log(...PR('STANDALONE MODE: sending URSYSDisconnect'));\n    document.dispatchEvent(event);\n  }\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/**\n * Converts 'CHANNEL:MESSAGE' string to an object with channel, message\n * properties. If there is more than one : in the message string, it's left\n * as part of the message. All properties returned in are UPPERCASE.\n * @param {string} message - message with optional channel prefix\n * @returns {Object} - contains channel (UC) that are set\n * @example\n * const parsed = NetPacket.DecodeChannel('NET:MY_MESSAGE');\n * if (parsed.NET) console.log('this is true');\n * if (parsed.LOCAL) console.log('this is false');\n * console.log('message is',parsed.MESSAGE);\n */\n\n\nNetPacket.ExtractChannel = function ExtractChannel(msg) {\n  let [channel, MESSAGE] = msg.split(':', 2); // no : found, must be local\n\n  if (!MESSAGE) {\n    MESSAGE = channel;\n    channel = '';\n  }\n\n  const parsed = {\n    MESSAGE\n  };\n\n  if (!channel) {\n    parsed.LOCAL = true;\n    return parsed;\n  }\n\n  if (channel === '*') {\n    VALID_CHANNELS.forEach(chan => {\n      parsed[chan] = true;\n    });\n    return parsed;\n  }\n\n  if (VALID_CHANNELS.includes(channel)) {\n    parsed[channel] = true;\n    return parsed;\n  } // legacy messages use invalid channel names\n  // for now forward them as-is\n\n\n  console.warn(`'${msg}' replace : with _`);\n  parsed.LOCAL = true;\n  return parsed; // this is what should actually happen\n  // throw Error(`invalid channel '${channel}'`);\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** NetPacket.SocketUADDR() is a static method returning the class-wide setting\n * of the browser UADDR. This is only used on browser code.\n * @function\n * @returns {string} URSYS address of the current browser, a URSYS address\n */\n\n\nNetPacket.SocketUADDR = () => {\n  return NetPacket.UADDR;\n};\n\nNetPacket.Peers = () => {\n  return NetPacket.PEERS;\n};\n\nNetPacket.IsLocalhost = () => {\n  return NetPacket.ULOCAL;\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** NetPacket.DefaultServerUADDR() is a static method returning a hardcoded\n * URSYS address referring to the URSYS server. It is used by the server-side\n * code to set the server address, and the browser can rely on it as well.\n * @function\n * @returns {string} URSYS address of the server\n */\n\n\nNetPacket.DefaultServerUADDR = () => {\n  return 'SVR_01';\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** NetPacket.GlobalGroupID() is a static method returning the session key\n * (aka group-id) set for this browser instance\n * @function\n * @returns {string} session key\n */\n\n\nNetPacket.GlobalGroupID = () => {\n  return m_group_id;\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** NetPacket.GlobalSetGroupID() is a static method that stores the passed\n * token as the GroupID\n * @function\n * @param {string} token - special session key data\n */\n\n\nNetPacket.GlobalSetGroupID = token => {\n  m_group_id = token;\n}; /// PRIVATE CLASS HELPERS /////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/*/ DEPRECATE? Utility function to increment the packet's sequence number\n *  @param {NetPacket} pkt - packet to modify\n/*/\n\n\nfunction m_SeqIncrement(pkt) {\n  pkt.seqnum++;\n  return pkt;\n} ///\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/*/ Utility to create a unique hash key from packet information. Used by\n *  PromiseTransaction().\n *  @param {NetPacket} pkt - packet to use\n *  @return {string} hash key string\n/*/\n\n\nfunction m_GetHashKey(pkt) {\n  let hash = `${pkt.SourceAddress()}:${pkt.id}`;\n  return hash;\n} ///\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/*/ Utility to ensure that the passed type is one of the allowed packet types.\n *  Throws an error if it is not.\n *  @param {string} type - a string to be matched against PACKET_TYPES\n *  @returns {string} the string that passed the type check\n/*/\n\n\nfunction m_CheckType(type) {\n  if (type === undefined) {\n    throw new Error(`must pass a type string, not ${type}`);\n  }\n\n  if (!PACKET_TYPES.includes(type)) throw Error(`${ERR_UNKNOWN_TYPE} '${type}'`);\n  return type;\n} ///\t- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/*/ Utility to ensure the passed transaction mode is one of the allowed\n *  types. Throws an error if it is not.\n *  @param {string} mode - a string to be matched against TRANSACTION_MODE\n *  @returns {string} the string the passed the mode check\n/*/\n\n\nfunction m_CheckRMode(mode) {\n  if (mode === undefined) {\n    throw new Error(`must pass a mode string, not ${mode}`);\n  }\n\n  if (!TRANSACTION_MODE.includes(mode)) throw Error(`${ERR_UNKNOWN_RMODE} '${mode}'`);\n  return mode;\n} /// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nNetPacket.CODE_OK = 0;\nNetPacket.CODE_NO_MESSAGE = 1; // requested message doesn't exist\n\nNetPacket.CODE_SOC_NOSOCK = -100;\nNetPacket.CODE_SES_REQUIRE_KEY = -200; // access key not set\n\nNetPacket.CODE_SES_REQUIRE_LOGIN = -201; // socket was not logged-in\n\nNetPacket.CODE_SES_INVALID_KEY = -202; // provided key didn't match socket key\n\nNetPacket.CODE_SES_RE_REGISTER = -203; // session attempted to login again\n\nNetPacket.CODE_SES_INVALID_TOKEN = -204; // session attempted to login again\n\nNetPacket.CODE_REG_DENIED = -300; // registration of handler denied\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// using CommonJS format on purpose for node compatibility\n\nmodule.exports = NetPacket;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/class-netpacket.js\n");

/***/ }),

/***/ "./src/class-phase-machine.js":
/*!************************************!*\
  !*** ./src/class-phase-machine.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  URSYS PhaseMachine is a class to implement simple \"phased execution\" by\n  operation and group. It's used for implementing looping lifecycle events.\n\n  EXAMPLE:\n\n    const PM = new PhaseMachine({\n      PHASE_RUN: [ 'INIT', 'LOAD', 'RUN', 'STOP ]\n    });\n    // hook function to phase\n    PM.Hook('INIT',(...args)=>{});\n    PM.Hook('LOAD',(...args)=>new Promise((resolve,reject)=>{});\n    // invocation\n    (async () => {\n      await PM.Execute('INIT');\n      await PM.ExecutePhase('PHASE_RUN');\n      await PM.ExecutePhaseParallel('PHASE_RUN');\n    })();\n\n  NOTES:\n  * It is up to you to implement the logic for when to execute phase\n    operations. See client-exec.js for examples.\n  * if you subscribe to a phase group operation, you receive the list of\n    phases and the current index at the beginning of each phase\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n/// LIBRARIES /////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst PROMPTS = __webpack_require__(/*! ./util/prompts */ \"./src/util/prompts.js\"); /// DEBUG CONSTANTS ///////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nconst DBG = {\n  subs: true,\n  ops: false,\n  phases: false,\n  init: false\n};\nconst IS_NODE = typeof window === 'undefined';\nconst PR = PROMPTS.makeStyleFormatter('UR.PHM'); /// CONSTANTS & DECLARATIONS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nconst m_machines = new Map(); // store phasemachines <machinename,instance>\n\nconst m_queue = new Map(); // store by <machinename,['op',f]>\n/// PRIVATE HELPERS ///////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** UTILITY: call the hook object's function. This used to do additional\n *  checks to see if the function should be called based on the route.\n */\n\nfunction m_InvokeHook(op, hook, ...args) {\n  if (hook.scope) throw Error('scope checking is not implemented in this version of URSYS'); // execute callbac and return possible Promise\n\n  if (hook.f) return hook.f(...args); // if no hook.f, this hook was implicitly mocked\n\n  return undefined;\n} // end m_InvokeHook\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** UTILITY: process queued hooks for a phasemachine name.\n */\n\n\nfunction m_ProcessQueueFor(pmkey) {\n  const pm = m_machines.get(pmkey);\n\n  if (!pm) {\n    console.warn(...PR(`${pmkey} not yet defined`));\n    return;\n  }\n\n  const qhooks = m_queue.get(pmkey) || [];\n  if (DBG.init) console.log(...PR(`phasemachine '${pmkey}' has ${qhooks.length} queued ops`));\n\n  try {\n    qhooks.forEach(element => {\n      const [op, f] = element;\n      pm.Hook(op, f);\n    });\n    m_queue.delete(pmkey);\n  } catch (e) {\n    console.warn(...PR('Error while processing queued phasemachine hooks'));\n    throw Error(e.toString());\n  }\n} // end m_ProcessQueueFor\n/// URSYS PhaseMachine CLASS //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nclass PhaseMachine {\n  /** CONSTRUCTOR: phases is an object of upper-case KEYS containing\n   *  arrays of OPERATION strings.\n   */\n  constructor(shortName, phases) {\n    if (typeof shortName !== 'string') throw Error('arg1 must be string');\n    if (shortName.length < 1) throw Error('arg1 string.length must be > 1');\n    if (m_machines.has(shortName)) throw Error(`already registered '${shortName}'`);\n    this.NAME = shortName;\n    this.OP_HOOKS = new Map();\n    this.PHASES = phases;\n    Object.keys(phases).forEach(phaseKey => {\n      this.OP_HOOKS.set(phaseKey, []); // add the phase name to ophooks map as special case\n\n      this.PHASES[phaseKey].forEach(opKey => {\n        this.OP_HOOKS.set(opKey, []); // add each op in the phase to ophooks map\n      });\n    }); // bind functions to instance so it can be called inside promises\n    // and asynchronous handler context\n\n    this.Hook = this.Hook.bind(this);\n    this.Execute = this.Execute.bind(this);\n    this.ExecutePhase = this.ExecutePhase.bind(this);\n    this.ExecutePhaseParallel = this.ExecutePhaseParallel.bind(this);\n    this.GetHookFunctions = this.GetHookFunctions.bind(this);\n    this.GetPhaseFunctionsAsMap = this.GetPhaseFunctionsAsMap.bind(this); // save instance by name\n\n    m_machines.set(shortName, this);\n    if (DBG.init) console.log(...PR(`phasemachine '${shortName}' saved`)); // check queued hooks\n\n    m_ProcessQueueFor(shortName);\n  } // end constructor\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** API: register an Operations Handler. <op> is a string constant\n   *  define in PHASES and converted into the MAP. <f> is a function that\n   *  will be invoked during the operation, and it can return a promise or value.\n   */\n\n\n  Hook(op, f, scope = '') {\n    // don't run on server\n    if (IS_NODE) return; // vestigial scope parameter check if we need it someday\n\n    if (typeof scope !== 'string') throw Error('<arg1> scope should be included'); // does this operation name exist?\n\n    if (typeof op !== 'string') throw Error(\"<arg2> must be PHASENAME (e.g. 'LOAD_ASSETS')\");\n    if (!this.OP_HOOKS.has(op)) throw Error(`Phase handler '${this.NAME}':'${op}' is not defined`);\n    let status = 'REGD';\n\n    if (!(f instanceof Function)) {\n      // no function means \"implicit mock\"\n      status = 'MOCK';\n    } // get the list of promises associated with this op\n    // and add the new promise\n\n\n    const hook = {\n      f,\n      scope\n    };\n    this.OP_HOOKS.get(op).push(hook);\n    if (DBG.init) console.log(...PR(`${status} '${this.NAME}.${op}' Hook`));\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** API: Execute all Promises associated with a op, completing when\n   *  all the callback functions complete. If the callback function returns\n   *  a Promise, this is added to a list of Promises to wait for before the\n   *  function returns control to the calling code.\n   */\n\n\n  Execute(op, ...args) {\n    // note: contents of PHASE_HOOKs are promise-generating functions\n    if (!this.OP_HOOKS.has(op)) throw Error(`${op} is not a recognized EXEC op`);\n    if (op.startsWith('PHASE_') && DBG.phases) console.log(`warning:${op} phase group executed as single op`); // check that there are promises to execute\n\n    let hooks = this.OP_HOOKS.get(op);\n\n    if (hooks.length === 0) {\n      if (DBG.ops) console.log(...this.PR(`[${op}] no subscribers`));\n      return Promise.resolve();\n    } // now execute handlers and promises\n\n\n    let icount = 0; // get an array of promises\n    // o contains 'f', 'scope' pushed in Hook() above\n\n    const promises = [];\n    hooks.forEach(hook => {\n      let retval = m_InvokeHook(op, hook, ...args);\n\n      if (retval instanceof Promise) {\n        icount++;\n        promises.push(retval);\n      }\n    });\n    if (DBG.ops && hooks.length) console.log(...this.PR(`[${op}] HANDLERS PROCESSED : ${hooks.length}`));\n    if (DBG.ops && icount) console.log(...this.PR(`[${op}] PROMISES QUEUED    : ${icount}`)); // wait for all promises to execute\n\n    return Promise.all(promises).then(values => {\n      if (DBG.ops && values.length) console.log(...this.PR(`[${op}] PROMISES RETVALS  : ${values.length}`, values));\n      return values;\n    }).catch(err => {\n      if (DBG.ops) console.log(...this.PR(`[${op}]: ${err}`));\n      throw Error(`[${op}]: ${err}`);\n    });\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** API: Execute all Promises associated with a Phase Group in serial\n   *  css-tricks.com/why-using-reduce-to-sequentially-resolve-promises-works/\n   */\n\n\n  ExecutePhase(phaseName, ...args) {\n    if (DBG.phases) console.log(...this.PR(`ExecutePhase('${phaseName}')`));\n    const ops = this.PHASES[phaseName];\n    if (ops === undefined) throw Error(`Phase \"${phaseName}\" doesn't exist in ${this.NAME}`);\n    const phaseHookFuncs = this.GetHookFunctions(phaseName);\n    let index = 0;\n    return ops.reduce(async (previousPromise, nextOp) => {\n      phaseHookFuncs.forEach(f => f(ops, index++));\n      await previousPromise; // wait for previous promise to finish\n\n      return this.Execute(nextOp, ...args); // queue next promise\n    }, phaseHookFuncs.forEach(f => f(ops, index++))); // initial value of previousPromise\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** API: Execute all Promises associated with a Phase Group in parallel\n   */\n\n\n  ExecutePhaseParallel(phaseName, ...args) {\n    const ops = this.PHASES[phaseName];\n    if (ops === undefined) throw Error(`Phase \"${phaseName}\" doesn't exist`);\n    return Promise.all(ops.map(op => this.Execute(op, ...args))); // fix this and return promise\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** UTILITY: Return hooks array for a given operation. Useful when\n   *  using closures to create an optimal execution function as in\n   *  client-exec SystemRun()\n   */\n\n\n  GetHookFunctions(op) {\n    if (DBG.ops) console.log(...this.PR(`getting hook for '${op}'`));\n    return this.OP_HOOKS.get(op).map(hook => hook.f);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** UTILITY: Return a Map organized by phase:functions[]\n   */\n\n\n  GetPhaseFunctionsAsMap(phaseName) {\n    if (!phaseName.startsWith('PHASE_')) throw Error(`${phaseName} is not a Phase Group name`);\n    if (DBG.ops) console.log(...this.PR(`getting hook map for phase '${phaseName}'`));\n    const phaseOps = this.PHASES[phaseName]; // list of operations in the phase\n\n    const map = new WeakMap();\n    phaseOps.forEach(pop => {\n      map.set(pop, this.OP_HOOKS.get(phaseName).map(hook => hook.f));\n    });\n    return map;\n  }\n\n} /// STATIC METHODS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Queue hook requests even if machine isn't already defined.\n *  This routine can be used as the standard hook method for UR clients.\n */\n\n\nPhaseMachine.QueueHookFor = (pmName, op, f) => {\n  if (typeof pmName !== 'string') throw Error('arg1 must be phasemachine name');\n  if (typeof op !== 'string') throw Error('arg2 must be phaseop name');\n  if (typeof f !== 'function' && f !== undefined) throw Error('arg3 must be function or undefined'); //\n\n  const pm = m_machines.get(pmName); // if phasemachine is already valid, then just hook it directly\n\n  if (pm) {\n    pm.Hook(op, f);\n    return;\n  } // otherwise, queue the request\n\n\n  if (!m_queue.has(pmName)) m_queue.set(pmName, []);\n  const q = m_queue.get(pmName);\n  q.push([op, f]); // array of 2-element arrays\n}; /// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nmodule.exports = PhaseMachine;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/class-phase-machine.js\n");

/***/ }),

/***/ "./src/client-channel.js":
/*!*******************************!*\
  !*** ./src/client-channel.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable prefer-promise-reject-errors */\n\n/* eslint-disable lines-between-class-members */\n\n/* eslint-disable func-names */\n\n/* eslint-disable no-param-reassign */\n\n/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n    URSYS CHANNEL CLASS (URCHAN)\n\n    A URCHAN (channel) represents a connection to the URSYS message-passing\n    system for the app and optionally other entities on the URSYS Net.\n\n    Instances are created with URSYS.Connect() with a unique name for logging\n    purposes.\n\n    Additionally, each URCHAN has a unique local id (UID) that is assigned\n    a device address (UADDR). These are used together to make multiple URCHAN\n    instances in an UR App uniquely addressable, though users of URSYS\n    don't need to know that.\n\n    Channels can:\n\n    * subscribe to a named message, locally and from the network\n    * publish to a named message, locally and to the network\n    * call a named message and receive a response asychronously\n    * update state change message, locally and to the network\n    * synch a state change message, locally and from the network\n    * hook into a lifecycle message, locally and from the network\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/\n/// LIBRARIES /////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n// NOTE: This module uses the COMMONJS module format for compatibility\n// between node and browser-side Javascript.\nconst Messager = __webpack_require__(/*! ./class-messager */ \"./src/class-messager.js\");\n\nconst DataMap = __webpack_require__(/*! ./class-datamap */ \"./src/class-datamap.js\");\n\nconst URNet = __webpack_require__(/*! ./client-network */ \"./src/client-network.js\");\n\nconst PROMPTS = __webpack_require__(/*! ./util/prompts */ \"./src/util/prompts.js\");\n\nconst PR = PROMPTS.makeStyleFormatter('UR.CHN');\n/** implements endpoints for talking to the URSYS network\n * @module URChan\n */\n/// DEBUGGING /////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nconst DBG = {\n  create: false,\n  send: false,\n  return: false,\n  register: false\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nconst BAD_NAME = 'name parameter must be a string';\nconst BAD_UID = 'unexpected non-unique UID'; /// NODE MANAGEMENT ///////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nconst UNODE_MAP = new Map(); // URSYS connector node map (local)\n\nconst MAX_UNODES = 100;\nlet UNODE_COUNTER = 0; // URSYS connector node id counter\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nfunction m_GetUniqueId() {\n  const id = `${++UNODE_COUNTER}`.padStart(3, '0');\n  if (UNODE_COUNTER > MAX_UNODES) console.warn('Unexpectedly high number of URCHAN nodes created!');\n  return `UDL${id}`;\n} /// GLOBAL MESSAGES ///////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nlet MESSAGER = new Messager(); // all urlinks share a common messager\n/// URSYS NODE CLASS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Instances of this class can register/unregister message handlers and also\n * send messages. Constructor receives an owner, which is inspected for\n * properties to determine how to classify the created messager for debugging\n * purposes\n * @memberof URChan\n */\n\nclass URChan {\n  /** constructor\n   * @param {object} owner the class instance or code module object\n   * @param {string} owner.name code module name set manually\n   * @param {string} [owner.constructor.name] for classes\n   * @param {string} optName optional name to use instead owner.name or owner.constructor.name\n   */\n  constructor(name) {\n    if (name !== undefined && typeof name !== 'string') {\n      throw Error(BAD_NAME);\n    } // bind function\n\n\n    this.UID = this.UID.bind(this);\n    this.Name = this.Name.bind(this);\n    this.UADDR = this.UADDR.bind(this);\n    this.Subscribe = this.Subscribe.bind(this);\n    this.Unsubscribe = this.Unsubscribe.bind(this);\n    this.Call = this.Call.bind(this);\n    this.Publish = this.Publish.bind(this);\n    this.Signal = this.Signal.bind(this);\n    this.LocalCall = this.LocalCall.bind(this);\n    this.LocalPublish = this.LocalPublish.bind(this);\n    this.LocalSignal = this.LocalSignal.bind(this);\n    this.NetCall = this.NetCall.bind(this);\n    this.NetPublish = this.NetPublish.bind(this);\n    this.NetSignal = this.NetSignal.bind(this); // generate and save unique id\n\n    this.uid = m_GetUniqueId();\n    this.name = name; // save module in the global module list\n\n    if (UNODE_MAP.has(this.uid)) throw Error(BAD_UID + this.uid);\n    if (DBG.create) console.log(PR, `${this.uid} <-> '${this.name}'`);\n    UNODE_MAP.set(this.uid, this);\n  } /// UNIQUE URSYS ID for local application\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n  /// this is used to differentiate sources of events so they don't echo\n\n\n  UID() {\n    return this.uid;\n  }\n\n  Name() {\n    return this.name;\n  }\n\n  UADDR() {\n    return URNet.SocketUADDR();\n  } /// MESSAGES ////////////////////////////////////////////////////////////////\n  /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** mesgName is a string, and is an official event that's defined by the\n   * subclasser of UnisysNode\n   */\n\n\n  Subscribe(mesgName, listener) {\n    // uid is \"source uid\" of subscribing object, to avoid reflection\n    // if the subscribing object is also the originating state changer\n    if (DBG.register) console.log(`${this.uid} _${PR} `, `${this.name} handler added[${mesgName}]`);\n    MESSAGER.Subscribe(mesgName, listener, {\n      handlerUID: this.UID()\n    });\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** variation of Subscribe that receives from remotes as well\n   */\n\n\n  NetSubscribe(mesgName, listener) {\n    // uid is \"source uid\" of subscribing object, to avoid reflection\n    // if the subscribing object is also the originating state changer\n    if (DBG.register) console.log(`${this.uid} _${PR} `, `${this.name} nethandler added[${mesgName}]`);\n    MESSAGER.Subscribe(mesgName, listener, {\n      fromNet: true,\n      handlerUID: this.UID()\n    });\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** remove a listener from message\n   */\n\n\n  Unsubscribe(mesgName, listener) {\n    if (DBG.register) console.log(`${this.uid} _${PR} `, `${this.name} handler removed[${mesgName}]`);\n    MESSAGER.Unsubscribe(mesgName, listener);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** URCHAN wraps Messager.CallAsync(), which returns an agregate data\n   * bundle after executing a bunch of promises async/await-style!\n   */\n\n\n  Call(mesgName, inData = {}, options = {}) {\n    options = Object.assign(options, {\n      type: 'mcall'\n    });\n    options.srcUID = this.UID(); // returns promise that resolves to data object\n\n    let result = MESSAGER.CallAsync(mesgName, inData, options);\n    return result;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** Sends the data to all message implementors UNLESS it is originating from\n   *   the same URCHAN instance (avoid echoing back to self)\n   */\n\n\n  Publish(mesgName, inData = {}, options = {}) {\n    if (typeof inData === 'function') throw Error('did you intend to use Subscribe() instead of Publish()?');\n    options = Object.assign(options, {\n      type: 'msend'\n    });\n    options.srcUID = this.UID();\n    MESSAGER.Publish(mesgName, inData, options);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** Sends the data to all message implementors, irregardless of origin.\n   */\n\n\n  Signal(mesgName, inData = {}, options = {}) {\n    options = Object.assign(options, {\n      type: 'msig'\n    });\n    MESSAGER.Signal(mesgName, inData, options);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** version of Call that forces local-only calls\n   */\n\n\n  LocalCall(mesgName, inData, options = {}) {\n    options = Object.assign(options, {\n      type: 'mcall'\n    });\n    options.toLocal = true;\n    options.toNet = false; // returns promise that resolve to data object\n\n    return this.Call(mesgName, inData, options);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** version of Send that force local-only calls\n   */\n\n\n  LocalPublish(mesgName, inData, options = {}) {\n    options = Object.assign(options, {\n      type: 'msend'\n    });\n    options.toLocal = true;\n    options.toNet = false;\n    this.Publish(mesgName, inData, options);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** version of Send that force local-only calls\n   */\n\n\n  LocalSignal(mesgName, inData, options = {}) {\n    options = Object.assign(options, {\n      type: 'msig'\n    });\n    options.toLocal = true;\n    options.toNet = false;\n    this.Signal(mesgName, inData, options);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** version of Call that forces network-only calls\n   */\n\n\n  NetCall(mesgName, inData, options = {}) {\n    options = Object.assign(options, {\n      type: 'mcall'\n    });\n    options.toLocal = false;\n    options.toNet = true; // returns promise that resolve to data object\n\n    return this.Call(mesgName, inData, options);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** version of Send that force network-only calls\n   */\n\n\n  NetPublish(mesgName, inData, options = {}) {\n    options = Object.assign(options, {\n      type: 'msend'\n    });\n    options.toLocal = false;\n    options.toNet = true;\n    this.Publish(mesgName, inData, options);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** version of Signal that forces network-only signal\n   */\n\n\n  NetSignal(mesgName, inData, options = {}) {\n    options.toLocal = false;\n    options.toNet = true;\n    this.Signal(mesgName, inData, options);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\n  NullCallback() {\n    if (DBG.send) console.log(`${this.uid} _${PR} `, 'null_callback', this.UID());\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /**\n   * Inform URSYS server that we have the following subscribers for the passed\n   * list of messages.\n   * @param {Array<string>} [messages] optional list of messages to register.\n   * If messages is empty, then it's assumed that we are registering all message\n   * subscribers.\n   */\n\n\n  RegisterSubscribers(messages = []) {\n    if (URNet.IsStandaloneMode()) {\n      console.warn(PR, 'STANDALONE MODE: RegisterMessagesPromise() suppressed!');\n      return Promise.resolve();\n    } // if there are no messages passed, then\n\n\n    if (messages.length) {\n      messages = MESSAGER.ValidateMessageNames(messages);\n    } else {\n      messages = MESSAGER.NetMessageNames();\n    } // returns promise that resolve to data object\n\n\n    const result = this.NetCall('NET:SRV_REG_HANDLERS', {\n      messages\n    });\n    return result;\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /**\n   * Perform data operation to server. Do not call directly, but use\n   * UR.DBQuery(cmd,data). The cmd is looks up the corresponding URSYS\n   * message (e.g. add -> NET:SRV_DBADD)\n   * @example\n   * DataMap.DBQuery('add', { teachers: { name: 'NewTeacher' }});\n   */\n\n\n  _DBQuery(cmd, data) {\n    const opmsg = DataMap.GetCommandMessage(cmd);\n    if (!opmsg) return Promise.reject(`invalid operation '${cmd}'`);\n    if (data.cmd) return Promise.reject(\"do not include 'cmd' prop in data pack\");\n    if (!data.key) return Promise.reject(\"data must have access key 'key' defined\");\n    data.cmd = cmd;\n    let res = DataMap.ValidateCollections(data);\n    if (!res) return Promise.reject(`no-op: no valid collections found ${res}`); // got this far, so let's do the call!\n    // returns promise that resolve to data object\n\n    return this.NetCall(opmsg, data);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** Cooperative database element lock on server\n   */\n\n\n  _DBLock(data) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      dbkey,\n      dbids,\n      key\n    } = data;\n    if (!DataMap.IsValidKey(dbkey)) return Promise.reject(`invalid dbkey ${dbkey}`);\n    if (!DataMap.IsValidIdsArray(dbids)) return Promise.reject('dbids must be array of ints');\n    if (!data.key) return Promise.reject(\"data must have access key 'key' defined\");\n    if (!data.uaddr) return Promise.reject('data must have uaddr defined');\n    return this.NetCall('NET:SRV_DBLOCK', data);\n  } /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n  /** Cooperative database element release on server\n   */\n\n\n  _DBRelease(data) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      dbkey,\n      dbids,\n      key\n    } = data;\n    if (!DataMap.IsValidKey(dbkey)) return Promise.reject(`invalid dbkey ${dbkey}`);\n    if (!DataMap.IsValidIdsArray(dbids)) return Promise.reject('dbids must be array of ints');\n    if (!data.key) return Promise.reject(\"data must have access key 'key' defined\");\n    if (!data.uaddr) return Promise.reject('data must have uaddr defined');\n    return this.NetCall('NET:SRV_DBRELEASE', data);\n  }\n\n} // class URChan\n/// EXPORT CLASS DEFINITION ///////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nmodule.exports = URChan;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/client-channel.js\n");

/***/ }),

/***/ "./src/client-exec.js":
/*!****************************!*\
  !*** ./src/client-exec.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable @typescript-eslint/no-use-before-define */\n\n/* eslint-disable consistent-return */\n\n/* eslint-disable no-debugger */\n\n/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  URSYS Application Lifecycle Controller\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n\n/**\n * @module URExec\n */\n/// LIBRARIES /////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst URSession = __webpack_require__(/*! ./client-session */ \"./src/client-session.ts\");\n\nconst URPhaseMachine = __webpack_require__(/*! ./class-phase-machine */ \"./src/class-phase-machine.js\");\n\nconst PR = __webpack_require__(/*! ./util/prompts */ \"./src/util/prompts.js\").makeStyleFormatter('UR.EXC'); /// CONSTANTS /////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nconst DBG = false; /// PRIVATE DECLARATIONS //////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nconst PHASES = {\n  PHASE_BOOT: ['TEST_INIT', // set any testing parameters or modes\n  'SYS_BOOTSTRAP' // grab initial props to load the rest of URSYS\n  ],\n  PHASE_INIT: ['SYS_INIT', // initialize key runtime parameters\n  'DOM_READY', // the dom is stable\n  'TEST_LOCAL' // run local tests that don't require network calls\n  ],\n  PHASE_CONNECT: ['NET_CONNECT', // initiate connection\n  'NET_REGISTER', // initiate registration\n  'NET_READY', // the network is stable\n  'TEST_NET' // run tests that require network readiness\n  ],\n  PHASE_LOAD: ['APP_LOAD' // app modules can request asynchronous loads\n  ],\n  PHASE_CONFIG: ['APP_CONFIGURE' // app modules can configure data structure from loaded data\n  ],\n  PHASE_READY: ['APP_READY' // all apps have loaded and configured and are ready to run\n  ],\n  PHASE_RUN: ['APP_STAGE', // app modules receive reset params prior to starting\n  'APP_START', // app modules start execution, all modules are ready\n  'APP_RUN', // app modules enter run mode\n  'APP_UPDATE', // app modules configuration update\n  'APP_RESET' // app_module will jump back to APP_RUN\n  ],\n  PHASE_PAUSED: ['APP_PAUSE', // app modules should enter \"paused state\"\n  'APP_UPDATE', // app modules configuration update\n  'APP_UNPAUSE' // app modules cleanup, then back to 'APP_LOOP'\n  ],\n  PHASE_UNLOAD: ['APP_STOP', // app is stopping\n  'APP_UNLOAD', // app is shutting down; release assets\n  'APP_SHUTDOWN' // app is shut down\n  ],\n  PHASE_REBOOT: ['SYS_REBOOT' // system is about to reboot back to PHASE_BOOT\n  ]\n}; /// PHASER ////////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nlet PHASE_MACHINE = new URPhaseMachine('UR', PHASES, '');\nconst {\n  ExecutePhase,\n  Execute\n} = PHASE_MACHINE; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** UTILITY: check options passed to SystemBoot, etc\n */\n\nfunction m_CheckOptions(options) {\n  const {\n    autoRun,\n    netProps,\n    ...other\n  } = options;\n  const unknown = Object.keys(other);\n\n  if (unknown.length) {\n    console.log(...PR(`warn - L1_OPTION unknown param: ${unknown.join(', ')}`));\n    throw Error('URSYS: bad option object');\n  } // return true if there were no unknown option properties\n\n\n  return unknown.length === 0;\n} /// RUNTIME API CALLS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** API: start the lifecycle state engine\n */\n\n\nasync function SystemBoot(options = {}) {\n  //\n  if (DBG) console.groupCollapsed('** URSYS: Boot');\n  m_CheckOptions(options);\n  URSession.InitializeNetProps(options.netProps); //\n\n  await ExecutePhase('PHASE_BOOT');\n  await ExecutePhase('PHASE_INIT');\n  await ExecutePhase('PHASE_CONNECT');\n  await ExecutePhase('PHASE_LOAD');\n  await ExecutePhase('PHASE_CONFIG');\n  await ExecutePhase('PHASE_READY'); //\n\n  if (options.autoRun) {\n    if (DBG) console.log(...PR('info - autoRun to next phase'));\n    if (DBG) console.groupEnd();\n    SystemRun(options);\n  }\n} /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** API: start the lifecycle run engine. This code is a bit convoluted because\n *  I'm trying to avoid allocating temporary variables that cause the heap\n *  to grow for each timer.\n */\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nasync function SystemRun(options = {}) {\n  // PART 1 - SYSTEM RUN\n  if (DBG) console.groupCollapsed('** URSYS: Run');\n  m_CheckOptions(options); //\n\n  await Execute('APP_STAGE');\n  await Execute('APP_START');\n  await Execute('APP_RUN');\n  if (DBG) console.groupEnd();\n} /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** API: something important application-wide has updated\n */\n\n\nasync function SystemUpdate() {\n  if (DBG) console.groupCollapsed('** URSYS: Restage'); //\n\n  await Execute('APP_UPDATE'); //\n\n  if (DBG) console.groupEnd();\n  SystemRun();\n} /// - - - - - - - - -\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** API: force loop back to run\n */\n\n\nasync function SystemRestage() {\n  if (DBG) console.groupCollapsed('** URSYS: Restage'); //\n\n  await Execute('APP_RESET'); //\n\n  if (DBG) console.groupEnd();\n  SystemRun();\n} /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** API: end the lifecycle state engine\n */\n\n\nasync function SystemUnload() {\n  if (DBG) console.groupCollapsed('** URSYS: Unload'); //\n\n  await ExecutePhase('PHASE_UNLOAD'); //\n\n  if (DBG) console.groupEnd();\n} /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** API: restart the lifecycle from boot\n */\n\n\nasync function SystemReboot() {\n  if (DBG) console.groupCollapsed('** URSYS: Reboot'); //\n\n  await ExecutePhase('PHASE_REBOOT'); //\n\n  if (DBG) console.groupEnd();\n} /// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nmodule.exports = {\n  SystemBoot,\n  SystemRun,\n  SystemUpdate,\n  SystemRestage,\n  SystemUnload,\n  SystemReboot\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/client-exec.js\n");

/***/ }),

/***/ "./src/client-network.js":
/*!*******************************!*\
  !*** ./src/client-network.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* eslint-disable @typescript-eslint/no-use-before-define */\n\n/* eslint-disable no-param-reassign */\n\n/*//////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n    URSYS NETWORK implements network controls and synchronization.\n    It initializes a network connection on the CONNECT lifecycle.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * //////////////////////////////////////*/\nconst NetPacket = __webpack_require__(/*! ./class-netpacket */ \"./src/class-netpacket.js\");\n\nconst URSession = __webpack_require__(/*! ./client-session */ \"./src/client-session.ts\");\n\nconst PR = __webpack_require__(/*! ./util/prompts */ \"./src/util/prompts.js\").makeStyleFormatter('UR.NET'); /// DECLARATIONS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nconst DBG = {\n  connect: false,\n  hello: true,\n  handle: false,\n  reg: false\n}; ///\n\nconst ERR_NO_SOCKET = 'Network socket has not been established yet';\nconst ERR_BAD_URCHAN = \"An instance of 'URChan' is required\"; /// NETWORK ID VALUES /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nconst M0_INIT = 0;\nconst M1_CONNECTING = 1;\nconst M2_CONNECTED = 2;\nconst M3_REGISTERED = 3;\nconst M4_READY = 4;\nconst M_STANDALONE = 5; /// DECLARATIONS //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nlet m_socket; // contain socket information on registration message\n\nlet m_urlink; // assigned during NETWORK.Connect()\n\nlet m_options;\nlet m_status = M0_INIT; /// NETWORK LISTENERS /////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nfunction m_AddListener(event, handlerFunction) {\n  if (m_socket instanceof WebSocket) {\n    m_socket.addEventListener(event, handlerFunction);\n  } else {\n    throw Error(ERR_NO_SOCKET);\n  }\n} /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nfunction m_RemoveListener(event, handlerFunction) {\n  if (m_socket instanceof WebSocket) {\n    m_socket.removeEventListener(event, handlerFunction);\n  } else {\n    throw Error(ERR_NO_SOCKET);\n  }\n} /// API HELPERS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** After 'open' event, we expect the first message on the socket to contain\n *  network session-related messages\n */\n\n\nfunction m_HandleRegistrationMessage(msgEvent) {\n  let regData = JSON.parse(msgEvent.data);\n  let {\n    HELLO,\n    UADDR,\n    SERVER_UADDR,\n    PEERS,\n    ULOCAL\n  } = regData; // (1) after receiving the initial message, switch over to regular\n  // message handler\n\n  m_RemoveListener('message', m_HandleRegistrationMessage);\n  m_status = M3_REGISTERED; // (2) initialize global settings for netmessage\n\n  if (DBG.connect || DBG.hello) console.log(...PR(`'${HELLO}'`));\n  m_socket.UADDR = NetPacket.DefaultServerUADDR();\n  NetPacket.GlobalSetup({\n    uaddr: UADDR,\n    netsocket: m_socket,\n    server_uaddr: SERVER_UADDR,\n    peers: PEERS,\n    is_local: ULOCAL\n  }); // (3) connect regular message handler\n\n  m_AddListener('message', m_HandleMessage);\n  m_status = M4_READY; // (4) network is initialized\n\n  if (typeof m_options.success === 'function') m_options.success(); // (5) also update window.URSESSION with UADDR\n\n  if (window.URSESSION) {\n    if (DBG.reg) console.log('updating URSESSION with registration data');\n    window.URSESSION.CLIENT_UADDR = UADDR;\n    window.URSESSION.USRV_UADDR = SERVER_UADDR;\n  }\n} /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Dispatch incoming event object from the network.\n *  @param {SocketEvent} msgEvent -incoming event object from websocket\n */\n\n\nfunction m_HandleMessage(msgEvent) {\n  let pkt = new NetPacket(msgEvent.data);\n  let msg = pkt.Message(); // (1) If this packet is a response packet, then it must be one of\n  // our OWN previously-sent messages that we expected a return value.\n  // Call CompleteTransaction() to invoke the function handler\n\n  if (pkt.IsResponse()) {\n    if (DBG.handle) console.log(...PR(`completing transaction ${msg}`));\n    pkt.CompleteTransaction();\n    return;\n  } // (2) Otherwise, the incoming network message has been routed to\n  // us to handle.\n\n\n  let data = pkt.Data();\n  let type = pkt.Type();\n  let dbgout = DBG.handle && !msg.startsWith('NET:SRV_'); // (3) handle each packet type as necessary\n\n  switch (type) {\n    case 'state':\n      // unimplemented netstate\n      if (dbgout) console.log(...PR(`received state change ${msg}`));\n      break;\n\n    case 'msig':\n      // network signal to raise\n      if (dbgout) cout_ReceivedStatus(pkt);\n      m_urlink.LocalSignal(msg, data, {\n        fromNet: true\n      });\n      pkt.ReturnTransaction();\n      break;\n\n    case 'msend':\n      // network message received\n      if (dbgout) cout_ReceivedStatus(pkt);\n      m_urlink.LocalPublish(msg, data, {\n        fromNet: true\n      });\n      pkt.ReturnTransaction();\n      break;\n\n    case 'mcall':\n      // network call received\n      if (dbgout) cout_ReceivedStatus(pkt);\n      m_urlink.LocalCall(msg, data, {\n        fromNet: true\n      }).then(result => {\n        if (dbgout) cout_ForwardedStatus(pkt, result); // now return the packet\n\n        pkt.SetData(result);\n        pkt.ReturnTransaction();\n      });\n      break;\n\n    default:\n      throw Error('unknown packet type', type);\n  } // DEBUG OUT UTILITY\n\n\n  function cout_ReceivedStatus(pkt) {\n    console.warn(...PR(`ME_${NetPacket.SocketUADDR()} received '${pkt.Type()}' '${pkt.Message()}' from ${pkt.SourceAddress()}`), pkt.Data());\n  } // DEBUG OUT UTILITY\n\n\n  function cout_ForwardedStatus(pkt, result) {\n    console.log(...PR(`ME_${NetPacket.SocketUADDR()} forwarded '${pkt.Message()}', returning ${JSON.stringify(result)}`));\n  }\n} /// API ///////////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nconst NETWORK = {}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Establish connection to URSYS server. This is called by client.js during\n *  NetworkInitialize(), which itself fires after the application has rendered\n *  completely.\n *  @param datalink - an urchannel endpoint\n *  @param opt - { success, failure } functions\n */\n\nNETWORK.Connect = (datalink, opt) => {\n  return new Promise(resolve => {\n    if (m_status > 0) {\n      let err = 'called twice...other views may be calling URSYS outside of lifecycle';\n      console.error(...PR(err));\n      return;\n    }\n\n    m_status = M1_CONNECTING; // check and save parms\n\n    if (datalink.constructor.name !== 'URChan') {\n      throw Error(ERR_BAD_URCHAN);\n    }\n\n    if (!m_urlink) m_urlink = datalink;\n    m_options = opt || {}; // create websocket\n    // uses values that are set by UR-EXEC SystemBoot()\n\n    const {\n      host: USRV_Host,\n      port: USRV_MsgPort\n    } = URSession.GetNetBroker();\n    let wsURI = `ws://${USRV_Host}:${USRV_MsgPort}`;\n    m_socket = new WebSocket(wsURI);\n    if (DBG.connect) console.log(...PR(`OPEN SOCKET TO ${wsURI}`)); // create listeners\n\n    m_AddListener('open', event => {\n      if (DBG.connect) console.log(...PR(`...OPEN ${event.target.url}`));\n      m_status = M2_CONNECTED; // message handling continues in 'message' handler\n      // the first message is assumed to be registration data\n\n      if (DBG.connect) console.log(...PR('CONNECTED'));\n      resolve();\n    });\n    m_AddListener('close', event => {\n      if (DBG.connect) console.log(...PR(`..CLOSE ${event.target.url}`));\n      NetPacket.GlobalOfflineMode();\n      m_status = M_STANDALONE;\n    }); // handle incoming messages\n\n    m_AddListener('message', m_HandleRegistrationMessage);\n  });\n}; // Connect()\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Force close of connection, for example if URSYS.AppReady() fails\n */\n\n\nNETWORK.Close = (code, reason) => {\n  code = code || 1000;\n  reason = reason || 'URSYS forced close';\n  m_socket.close(code, reason);\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Return the current uaddr of this client, which is stored in NetPacket\n *  when the client initializes.\n */\n\n\nNETWORK.SocketUADDR = () => {\n  return NetPacket.SocketUADDR();\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Return TRUE if client is in \"standalone\" mode. This was a NetCreate\n *  that was used to disable network communication for HTML-only snapshots.\n */\n\n\nNETWORK.IsStandaloneMode = () => {\n  return m_status === M_STANDALONE;\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Return TRUE if client is running with the localhost as server.\n *  This can be used as quick way to enable admin-only features.\n */\n\n\nNETWORK.IsLocalhost = () => NetPacket.IsLocalhost(); /// EXPORT MODULE DEFINITION //////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nmodule.exports = NETWORK;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/client-network.js\n");

/***/ }),

/***/ "./src/client-session.ts":
/*!*******************************!*\
  !*** ./src/client-session.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  CLIENT-SESSION centralizes shared data structures about the session.\n  This is a pure data module that can be referenced by any URSYS client.\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n/**\n *  @module ClientSession\n */\n/// DEBUG  ////////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst DBG = false;\nconst PR = __webpack_require__(/*! ./util/prompts */ \"./src/util/prompts.js\").makeStyleFormatter('UR.SES');\n/// DECLARATIONS //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nlet NET_BROKER;\n/// API METHODS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nfunction InitializeNetProps(props) {\n    if (DBG)\n        console.log(...PR('info - setting netprops'), props);\n    const { broker } = props;\n    NET_BROKER = broker;\n    if (DBG)\n        console.log(...PR('session broker'), broker);\n}\nfunction GetNetBroker() {\n    return NET_BROKER;\n}\n/// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nmodule.exports = { InitializeNetProps, GetNetBroker };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY2xpZW50LXNlc3Npb24udHM/NDc2ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7K0VBSytFO0FBRS9FOztHQUVHO0FBRUgsK0VBQStFO0FBQy9FLCtFQUErRTtBQUMvRSxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDbEIsTUFBTSxFQUFFLEdBQUcsbUJBQU8sQ0FBQyw2Q0FBZ0IsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBY2xFLCtFQUErRTtBQUMvRSwrRUFBK0U7QUFDL0UsSUFBSSxVQUF5QixDQUFDO0FBRTlCLCtFQUErRTtBQUMvRSwrRUFBK0U7QUFDL0UsU0FBUyxrQkFBa0IsQ0FBQyxLQUFlO0lBQ3pDLElBQUksR0FBRztRQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM5RCxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDO0lBQ3pCLFVBQVUsR0FBRyxNQUFNLENBQUM7SUFDcEIsSUFBSSxHQUFHO1FBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3hELENBQUM7QUFDRCxTQUFTLFlBQVk7SUFDbkIsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQztBQUVELCtFQUErRTtBQUMvRSwrRUFBK0U7QUFDL0UsTUFBTSxDQUFDLE9BQU8sR0FBRyxFQUFFLGtCQUFrQixFQUFFLFlBQVksRUFBRSxDQUFDIiwiZmlsZSI6Ii4vc3JjL2NsaWVudC1zZXNzaW9uLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyovLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gQUJPVVQgXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXCpcXFxuXG4gIENMSUVOVC1TRVNTSU9OIGNlbnRyYWxpemVzIHNoYXJlZCBkYXRhIHN0cnVjdHVyZXMgYWJvdXQgdGhlIHNlc3Npb24uXG4gIFRoaXMgaXMgYSBwdXJlIGRhdGEgbW9kdWxlIHRoYXQgY2FuIGJlIHJlZmVyZW5jZWQgYnkgYW55IFVSU1lTIGNsaWVudC5cblxuXFwqXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXCAqIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8qL1xuXG4vKipcbiAqICBAbW9kdWxlIENsaWVudFNlc3Npb25cbiAqL1xuXG4vLy8gREVCVUcgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtXG5jb25zdCBEQkcgPSBmYWxzZTtcbmNvbnN0IFBSID0gcmVxdWlyZSgnLi91dGlsL3Byb21wdHMnKS5tYWtlU3R5bGVGb3JtYXR0ZXIoJ1VSLlNFUycpO1xuXG4vLy8gVFlQRSBERUNMQVJBVElPTlMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtXG5pbnRlcmZhY2UgTmV0UHJvcHMge1xuICBicm9rZXI6IE1lc3NhZ2VCcm9rZXI7XG59XG5pbnRlcmZhY2UgTWVzc2FnZUJyb2tlciB7XG4gIGhvc3Q6IHN0cmluZztcbiAgcG9ydDogbnVtYmVyO1xuICB1YWRkcjogc3RyaW5nO1xuICB1cm5ldF92ZXJzaW9uOiBudW1iZXI7XG59XG5cbi8vLyBERUNMQVJBVElPTlMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLyAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC1cbmxldCBORVRfQlJPS0VSOiBNZXNzYWdlQnJva2VyO1xuXG4vLy8gQVBJIE1FVEhPRFMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtXG5mdW5jdGlvbiBJbml0aWFsaXplTmV0UHJvcHMocHJvcHM6IE5ldFByb3BzKSB7XG4gIGlmIChEQkcpIGNvbnNvbGUubG9nKC4uLlBSKCdpbmZvIC0gc2V0dGluZyBuZXRwcm9wcycpLCBwcm9wcyk7XG4gIGNvbnN0IHsgYnJva2VyIH0gPSBwcm9wcztcbiAgTkVUX0JST0tFUiA9IGJyb2tlcjtcbiAgaWYgKERCRykgY29uc29sZS5sb2coLi4uUFIoJ3Nlc3Npb24gYnJva2VyJyksIGJyb2tlcik7XG59XG5mdW5jdGlvbiBHZXROZXRCcm9rZXIoKSB7XG4gIHJldHVybiBORVRfQlJPS0VSO1xufVxuXG4vLy8gRVhQT1JUUyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtXG5tb2R1bGUuZXhwb3J0cyA9IHsgSW5pdGlhbGl6ZU5ldFByb3BzLCBHZXROZXRCcm9rZXIgfTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/client-session.ts\n");

/***/ }),

/***/ "./src/index-client.js":
/*!*****************************!*\
  !*** ./src/index-client.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(__filename) {/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  URSYS CLIENT MAIN ENTRY\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\n/// LIBRARIES /////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nconst URChannel = __webpack_require__(/*! ./client-channel */ \"./src/client-channel.js\");\n\nconst URNet = __webpack_require__(/*! ./client-network */ \"./src/client-network.js\");\n\nconst URExec = __webpack_require__(/*! ./client-exec */ \"./src/client-exec.js\");\n\nconst PROMPTS = __webpack_require__(/*! ./util/prompts */ \"./src/util/prompts.js\");\n\nconst PR = PROMPTS.makeStyleFormatter('UR'); /// CLASSES ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nconst PhaseMachine = __webpack_require__(/*! ./class-phase-machine */ \"./src/class-phase-machine.js\"); /// META DATA /////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** these properties are exported from the library so you can tell if the\n *  ur instance you're using is serverside or clientside, if that needs\n *  to be checked\n */\n\n\nconst META = {\n  _CLIENT: true,\n  _SCRIPT: __filename,\n  _VERSION: '0.0.1'\n}; /// CLIENT-SIDE ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n/// to be implemented\n\nconst Events = {};\nconst Extensions = {};\nconst PubSub = {}; /// DECLARATIONS //////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nconst nc_sub = new URChannel('ursys-sub');\nconst nc_pub = new URChannel('ursys-pub');\nlet URSYS_RUNNING = false; /// MAIN API //////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** initialize modules that participate in UR EXEC PhaseMachine before running\n *  SystemBoot, which starts the URSYS lifecycle.\n */\n\nasync function SystemStart() {\n  if (URSYS_RUNNING) {\n    console.log(...PR('SystemStart: URSYS already running!!!'));\n    return Promise.reject();\n  } // autoconnect to URSYS network during NET_CONNECT\n\n\n  PhaseMachine.QueueHookFor('UR', 'NET_CONNECT', () => new Promise((resolvbe, reject) => URNet.Connect(nc_sub, {\n    success: resolvbe,\n    failure: reject\n  })));\n  URSYS_RUNNING = true;\n  return Promise.resolve();\n} /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** deallocate any system resources assigned during Initialize\n */\n\n\nasync function SystemStop() {\n  if (!URSYS_RUNNING) {\n    console.log(...PR('SystemModulesStop: URSYS is not running!!!'));\n    return Promise.resolve();\n  } // close the network\n\n\n  await URNet.Close();\n  URSYS_RUNNING = false;\n  return Promise.resolve();\n} /// EXPORTS ///////////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nmodule.exports = { ...META,\n  // FORWARDED PUB/SUB\n  Subscribe: nc_sub.Subscribe,\n  Unsubscribe: nc_sub.Unsubscribe,\n  Publish: nc_pub.LocalPublish,\n  Signal: nc_pub.LocalSignal,\n  Call: nc_pub.LocalCall,\n  // FORWARDED GENERIC PHASE MACHINE\n  SystemHook: PhaseMachine.QueueHookFor,\n  // SYSTEM STARTUP\n  SystemStart,\n  SystemStop,\n  // FORWARDED SYSTEM CONTROL VIA UREXEC\n  SystemBoot: URExec.SystemBoot,\n  SystemRun: URExec.SystemRun,\n  SystemRestage: URExec.SystemRestage,\n  SystemReboot: URExec.SystemReboot,\n  SystemUnload: URExec.SystemUnload,\n  // FORWARDED PROMPT UTILITY\n  PrefixUtil: PROMPTS.makeStyleFormatter,\n  SetPromptColor: PROMPTS.setPromptColor,\n  // FORWARDED CLASSES\n  class: {\n    PhaseMachine\n  }\n};\n/* WEBPACK VAR INJECTION */}.call(this, \"src/index-client.js\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index-client.js\n");

/***/ }),

/***/ "./src/util/prompts.js":
/*!*****************************!*\
  !*** ./src/util/prompts.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*///////////////////////////////// ABOUT \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*\\\n\n  ANSI TERMINAL color codes and utilities\n\n\\*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * /////////////////////////////////////*/\nconst IS_NODE = typeof window === 'undefined';\nconst DEFAULT_PADDING = IS_NODE ? 10 // nodejs\n: 0; // not nodejs\n\nconst DEFAULT_COLOR = 'TagGray';\nconst CSS_PAD = 'padding:3px 5px;border-radius:2px';\nconst CSS_TAB = '4px';\nconst TERM_COLORS = {\n  // TOUT = makeTerminalOut(str); TOUT('hi')\n  Reset: '\\x1b[0m',\n  Bright: '\\x1b[1m',\n  Dim: '\\x1b[2m',\n  Underscore: '\\x1b[4m',\n  Blink: '\\x1b[5m',\n  Reverse: '\\x1b[7m',\n  Hidden: '\\x1b[8m',\n  //\n  Black: '\\x1b[30m',\n  White: '\\x1b[37m',\n  Red: '\\x1b[31m',\n  Yellow: '\\x1b[33m',\n  Green: '\\x1b[32m',\n  Cyan: '\\x1b[36m',\n  Blue: '\\x1b[34m',\n  Magenta: '\\x1b[35m',\n  //\n  BgBlack: '\\x1b[40m',\n  BgRed: '\\x1b[41m',\n  BgYellow: '\\x1b[43m',\n  BgCyan: '\\x1b[46m',\n  BgGreen: '\\x1b[42m',\n  BgBlue: '\\x1b[44m',\n  BgPurple: '\\x1b[45m',\n  BgWhite: '\\x1b[47m',\n  //\n  TagYellow: '\\x1b[43;30m',\n  TagRed: '\\x1b[41;37m',\n  TagGreen: '\\x1b[42;37m',\n  TagCyan: '\\x1b[46;37m',\n  TagBlue: '\\x1b[43;37m',\n  TagPurple: '\\x1b[45;37m',\n  TagPink: '\\x1b[95;30m',\n  TagGray: '\\x1b[2;37m',\n  TagNull: 'color:#999'\n}; // NAME LIST MUST MATCH TERM_COLORS!\n\nconst CSS_COLORS = {\n  Reset: 'color:auto;background-color:auto',\n  // COLOR FOREGROUND\n  Black: 'color:black',\n  White: 'color:white',\n  Red: 'color:red',\n  Yellow: 'color:orange',\n  Green: 'color:green',\n  Cyan: 'color:cyan',\n  Blue: 'color:blue',\n  Magenta: 'color:magenta',\n  // COLOR BACKGROUND\n  TagRed: `color:#000;background-color:#f66;${CSS_PAD}`,\n  TagYellow: `color:#000;background-color:#fd4;${CSS_PAD}`,\n  TagGreen: `color:#000;background-color:#5c8;${CSS_PAD}`,\n  TagCyan: `color:#000;background-color:#2dd;${CSS_PAD}`,\n  TagBlue: `color:#000;background-color:#2bf;${CSS_PAD}`,\n  TagPurple: `color:#000;background-color:#b6f;${CSS_PAD}`,\n  TagPink: `color:#000;background-color:#f9f;${CSS_PAD}`,\n  TagGray: `color:#999;border:1px solid #ddd;${CSS_PAD}`,\n  TagNull: 'color:#999',\n  // COLOR BACKGROUND DARK\n  TagDkRed: `color:white;background-color:red;${CSS_PAD}`,\n  TagDkGreen: `color:white;background-color:green;${CSS_PAD}`,\n  TagDkBlue: `color:white;background-color:blue;${CSS_PAD}`\n}; /// OUTPUT CONTROL ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** define\n */\n\nconst SHOW = true;\nconst HIDE = false; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nconst PROMPT_DICT = {\n  // URSYS-RELATED MODULES\n  'UR': [SHOW, 'TagRed'],\n  // SERVERS\n  'APPSRV': [SHOW, 'Yellow'],\n  'GEMSRV': [SHOW, 'Yellow'],\n  // SPECIAL\n  '-': [SHOW, 'TagNull']\n}; /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** add a color to the PROMPT_DICT for a particular PREFIX */\n\nfunction m_SetPromptColors(match, color = DEFAULT_COLOR) {\n  if (typeof match !== 'string') throw Error('match prompt must be string');\n  match = match.trim();\n  if (match === '') throw Error('match prompt cannot be empty');\n  let colorTable = IS_NODE ? TERM_COLORS : CSS_COLORS;\n  let validColor = false;\n  validColor = colorTable[color] !== undefined;\n  if (!validColor) throw Error(`prompt color ${color} is not defined`); // turn on color prompt\n\n  PROMPT_DICT[match] = [true, color];\n  return colorTable;\n} /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Based on current detected enviroment, return either ANSI terminal or\n *  css based color markers for use in debugging messages. If tagColor is\n *  defined and corresponds to color definition, it is used to set the color.\n *  This is so users can set their own color prompts without editing\n *  PROMPTS_DICT structure.\n */\n\n\nfunction m_GetEnvColor(prompt, tagColor) {\n  const colorTable = m_SetPromptColors(prompt, tagColor);\n  const [dbg_mode, defcol] = PROMPT_DICT[prompt.trim()] || [SHOW, DEFAULT_COLOR];\n  const ucolor = colorTable[tagColor];\n  const dcolor = colorTable[defcol];\n  const color = ucolor || dcolor;\n  const reset = colorTable.Reset;\n  return [dbg_mode, color, reset];\n} /// API METHODS ///////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Pad string to fixed length, with default padding depending on\n *  whether the environment is node or browser\n */\n\n\nfunction padString(str, padding = DEFAULT_PADDING) {\n  let len = str.length;\n  if (IS_NODE) return `${str.padEnd(padding, ' ')}`; // must be non-node environment, so do dynamic string adjust\n\n  if (padding === 0) return `${str}`; // if this far, then we're truncating\n\n  if (len >= padding) str = str.substr(0, padding - 1);else str.padEnd(padding, ' ');\n  return `${str}`;\n} /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Return a function that will prompt strings for you. The function will\n *  returns an array to destructure into console.log().\n *\n *  To create the function, provide a short PROMPT. This will be color coded\n *  according to the PROMPTS_DICT table, or gray otherwise. You can turn off the\n *  debug output for all PROMPTS in a category also for centralized debug\n *  statement control.\n *\n *  The prompt function accepts a string followed by any number of parameters.\n *  It returns an array of values that are destructured inside of console.log()\n *    const promptFunction = makeLoginHelper('APP');\n *    console.log(...promptFunction('huzzah'));\n *\n *  NOTE: This doesn't work as expected on NodeJS, because empty arrays\n *  render as linefeeds so we just output it regardless. If you want to\n *  disable output, use the makeTerminalOut() function instead.\n */\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** allow modification of the PROMPT_DICT\n */\n\n\nfunction makeStyleFormatter(prompt, tagColor) {\n  const [dbg, color, reset] = m_GetEnvColor(prompt, tagColor); // return empty array if debugging disabled in browser\n  // or debugging is enabled but it's node (de morgan's law)\n\n  if (!(dbg || IS_NODE)) return () => []; // return the appropriate array to deconstructr\n\n  const wrap = IS_NODE ? (str, ...args) => {\n    return [`${color}${padString(prompt)}${reset}   ${str}`, ...args]; // server\n  } : (str, ...args) => {\n    return [`%c${padString(prompt)}%c ${str}`, color, reset, ...args]; // browser\n  };\n  return wrap;\n} /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Function to directly print to console instead of returning an array. This\n *  works better for NodeJS since the empty [] still results in output unlike\n *  the browser. Use makeStyleFormatter for browsers\n */\n\n\nfunction makeTerminalOut(prompt, tagColor) {\n  const [dbg, color, reset] = m_GetEnvColor(prompt, tagColor);\n  if (!dbg) return () => {};\n  const wrap = IS_NODE ? (str, ...args) => {\n    console.log(`${color}${padString(prompt)}${reset} - ${str}`, ...args);\n  } : (str, ...args) => {\n    console.log(`%c${padString(prompt)}%c ${str}`, color, reset, ...args);\n  };\n  return wrap;\n} /// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n/** Print all Tag Colors\n */\n\n\nfunction printTagColors() {\n  const colortable = IS_NODE ? TERM_COLORS : CSS_COLORS;\n  const colors = Object.keys(colortable).filter(element => element.includes('Tag'));\n  const reset = colortable.Reset;\n  const out = 'dbg_colors';\n  if (!IS_NODE) console.groupCollapsed(out);\n  colors.forEach(key => {\n    const color = colortable[key];\n    const items = IS_NODE ? [`${padString(out)} - (node) ${color}${key}${reset}`] : [`(browser) %c${key}%c`, color, reset];\n    console.log(...items);\n  });\n  if (!IS_NODE) console.groupEnd();\n} /// MODULE EXPORTS ////////////////////////////////////////////////////////////\n/// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n\nmodule.exports = {\n  TERM: TERM_COLORS,\n  CSS: CSS_COLORS,\n  padString,\n  makeStyleFormatter,\n  makeTerminalOut,\n  printTagColors,\n  m_SetPromptColors\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/util/prompts.js\n");

/***/ })

/******/ });
});